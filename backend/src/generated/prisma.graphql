type AggregateCharacter {
  count: Int!
}

type AggregateClass {
  count: Int!
}

type AggregateFeature {
  count: Int!
}

type AggregateFolk {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateStatBlock {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Character {
  id: ID!
}

type CharacterConnection {
  pageInfo: PageInfo!
  edges: [CharacterEdge]!
  aggregate: AggregateCharacter!
}

input CharacterCreateInput {
  id: ID
}

type CharacterEdge {
  node: Character!
  cursor: String!
}

enum CharacterOrderByInput {
  id_ASC
  id_DESC
}

type CharacterPreviousValues {
  id: ID!
}

type CharacterSubscriptionPayload {
  mutation: MutationType!
  node: Character
  updatedFields: [String!]
  previousValues: CharacterPreviousValues
}

input CharacterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharacterWhereInput
  AND: [CharacterSubscriptionWhereInput!]
  OR: [CharacterSubscriptionWhereInput!]
  NOT: [CharacterSubscriptionWhereInput!]
}

input CharacterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
}

input CharacterWhereUniqueInput {
  id: ID
}

type Class {
  id: ID!
  stats: StatBlock!
}

type ClassConnection {
  pageInfo: PageInfo!
  edges: [ClassEdge]!
  aggregate: AggregateClass!
}

input ClassCreateInput {
  id: ID
  stats: StatBlockCreateOneInput!
}

input ClassCreateOneInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

type ClassEdge {
  node: Class!
  cursor: String!
}

enum ClassOrderByInput {
  id_ASC
  id_DESC
}

type ClassPreviousValues {
  id: ID!
}

type ClassSubscriptionPayload {
  mutation: MutationType!
  node: Class
  updatedFields: [String!]
  previousValues: ClassPreviousValues
}

input ClassSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClassWhereInput
  AND: [ClassSubscriptionWhereInput!]
  OR: [ClassSubscriptionWhereInput!]
  NOT: [ClassSubscriptionWhereInput!]
}

input ClassUpdateDataInput {
  stats: StatBlockUpdateOneRequiredInput
}

input ClassUpdateInput {
  stats: StatBlockUpdateOneRequiredInput
}

input ClassUpdateOneInput {
  create: ClassCreateInput
  update: ClassUpdateDataInput
  upsert: ClassUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ClassWhereUniqueInput
}

input ClassUpsertNestedInput {
  update: ClassUpdateDataInput!
  create: ClassCreateInput!
}

input ClassWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  stats: StatBlockWhereInput
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
}

input ClassWhereUniqueInput {
  id: ID
}

type Feature {
  id: ID!
  name: String!
  description: String!
  effects: [String!]!
  fromFolk: Folk
  fromClass: Class
}

type FeatureConnection {
  pageInfo: PageInfo!
  edges: [FeatureEdge]!
  aggregate: AggregateFeature!
}

input FeatureCreateeffectsInput {
  set: [String!]
}

input FeatureCreateInput {
  id: ID
  name: String!
  description: String!
  effects: FeatureCreateeffectsInput
  fromFolk: FolkCreateOneWithoutFeaturesInput
  fromClass: ClassCreateOneInput
}

input FeatureCreateManyWithoutFromFolkInput {
  create: [FeatureCreateWithoutFromFolkInput!]
  connect: [FeatureWhereUniqueInput!]
}

input FeatureCreateWithoutFromFolkInput {
  id: ID
  name: String!
  description: String!
  effects: FeatureCreateeffectsInput
  fromClass: ClassCreateOneInput
}

type FeatureEdge {
  node: Feature!
  cursor: String!
}

enum FeatureOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type FeaturePreviousValues {
  id: ID!
  name: String!
  description: String!
  effects: [String!]!
}

input FeatureScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [FeatureScalarWhereInput!]
  OR: [FeatureScalarWhereInput!]
  NOT: [FeatureScalarWhereInput!]
}

type FeatureSubscriptionPayload {
  mutation: MutationType!
  node: Feature
  updatedFields: [String!]
  previousValues: FeaturePreviousValues
}

input FeatureSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeatureWhereInput
  AND: [FeatureSubscriptionWhereInput!]
  OR: [FeatureSubscriptionWhereInput!]
  NOT: [FeatureSubscriptionWhereInput!]
}

input FeatureUpdateeffectsInput {
  set: [String!]
}

input FeatureUpdateInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
  fromFolk: FolkUpdateOneWithoutFeaturesInput
  fromClass: ClassUpdateOneInput
}

input FeatureUpdateManyDataInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
}

input FeatureUpdateManyMutationInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
}

input FeatureUpdateManyWithoutFromFolkInput {
  create: [FeatureCreateWithoutFromFolkInput!]
  delete: [FeatureWhereUniqueInput!]
  connect: [FeatureWhereUniqueInput!]
  set: [FeatureWhereUniqueInput!]
  disconnect: [FeatureWhereUniqueInput!]
  update: [FeatureUpdateWithWhereUniqueWithoutFromFolkInput!]
  upsert: [FeatureUpsertWithWhereUniqueWithoutFromFolkInput!]
  deleteMany: [FeatureScalarWhereInput!]
  updateMany: [FeatureUpdateManyWithWhereNestedInput!]
}

input FeatureUpdateManyWithWhereNestedInput {
  where: FeatureScalarWhereInput!
  data: FeatureUpdateManyDataInput!
}

input FeatureUpdateWithoutFromFolkDataInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
  fromClass: ClassUpdateOneInput
}

input FeatureUpdateWithWhereUniqueWithoutFromFolkInput {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateWithoutFromFolkDataInput!
}

input FeatureUpsertWithWhereUniqueWithoutFromFolkInput {
  where: FeatureWhereUniqueInput!
  update: FeatureUpdateWithoutFromFolkDataInput!
  create: FeatureCreateWithoutFromFolkInput!
}

input FeatureWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  fromFolk: FolkWhereInput
  fromClass: ClassWhereInput
  AND: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
}

input FeatureWhereUniqueInput {
  id: ID
}

type Folk {
  id: ID!
  name: String!
  strMod: Int!
  conMod: Int!
  dexMod: Int!
  chaMod: Int!
  intMod: Int!
  wisMod: Int!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language!]
  features(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feature!]
}

type FolkConnection {
  pageInfo: PageInfo!
  edges: [FolkEdge]!
  aggregate: AggregateFolk!
}

input FolkCreateInput {
  id: ID
  name: String!
  strMod: Int!
  conMod: Int!
  dexMod: Int!
  chaMod: Int!
  intMod: Int!
  wisMod: Int!
  languages: LanguageCreateManyInput
  features: FeatureCreateManyWithoutFromFolkInput
}

input FolkCreateOneWithoutFeaturesInput {
  create: FolkCreateWithoutFeaturesInput
  connect: FolkWhereUniqueInput
}

input FolkCreateWithoutFeaturesInput {
  id: ID
  name: String!
  strMod: Int!
  conMod: Int!
  dexMod: Int!
  chaMod: Int!
  intMod: Int!
  wisMod: Int!
  languages: LanguageCreateManyInput
}

type FolkEdge {
  node: Folk!
  cursor: String!
}

enum FolkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  strMod_ASC
  strMod_DESC
  conMod_ASC
  conMod_DESC
  dexMod_ASC
  dexMod_DESC
  chaMod_ASC
  chaMod_DESC
  intMod_ASC
  intMod_DESC
  wisMod_ASC
  wisMod_DESC
}

type FolkPreviousValues {
  id: ID!
  name: String!
  strMod: Int!
  conMod: Int!
  dexMod: Int!
  chaMod: Int!
  intMod: Int!
  wisMod: Int!
}

type FolkSubscriptionPayload {
  mutation: MutationType!
  node: Folk
  updatedFields: [String!]
  previousValues: FolkPreviousValues
}

input FolkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FolkWhereInput
  AND: [FolkSubscriptionWhereInput!]
  OR: [FolkSubscriptionWhereInput!]
  NOT: [FolkSubscriptionWhereInput!]
}

input FolkUpdateInput {
  name: String
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  languages: LanguageUpdateManyInput
  features: FeatureUpdateManyWithoutFromFolkInput
}

input FolkUpdateManyMutationInput {
  name: String
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
}

input FolkUpdateOneWithoutFeaturesInput {
  create: FolkCreateWithoutFeaturesInput
  update: FolkUpdateWithoutFeaturesDataInput
  upsert: FolkUpsertWithoutFeaturesInput
  delete: Boolean
  disconnect: Boolean
  connect: FolkWhereUniqueInput
}

input FolkUpdateWithoutFeaturesDataInput {
  name: String
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  languages: LanguageUpdateManyInput
}

input FolkUpsertWithoutFeaturesInput {
  update: FolkUpdateWithoutFeaturesDataInput!
  create: FolkCreateWithoutFeaturesInput!
}

input FolkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  strMod: Int
  strMod_not: Int
  strMod_in: [Int!]
  strMod_not_in: [Int!]
  strMod_lt: Int
  strMod_lte: Int
  strMod_gt: Int
  strMod_gte: Int
  conMod: Int
  conMod_not: Int
  conMod_in: [Int!]
  conMod_not_in: [Int!]
  conMod_lt: Int
  conMod_lte: Int
  conMod_gt: Int
  conMod_gte: Int
  dexMod: Int
  dexMod_not: Int
  dexMod_in: [Int!]
  dexMod_not_in: [Int!]
  dexMod_lt: Int
  dexMod_lte: Int
  dexMod_gt: Int
  dexMod_gte: Int
  chaMod: Int
  chaMod_not: Int
  chaMod_in: [Int!]
  chaMod_not_in: [Int!]
  chaMod_lt: Int
  chaMod_lte: Int
  chaMod_gt: Int
  chaMod_gte: Int
  intMod: Int
  intMod_not: Int
  intMod_in: [Int!]
  intMod_not_in: [Int!]
  intMod_lt: Int
  intMod_lte: Int
  intMod_gt: Int
  intMod_gte: Int
  wisMod: Int
  wisMod_not: Int
  wisMod_in: [Int!]
  wisMod_not_in: [Int!]
  wisMod_lt: Int
  wisMod_lte: Int
  wisMod_gt: Int
  wisMod_gte: Int
  languages_every: LanguageWhereInput
  languages_some: LanguageWhereInput
  languages_none: LanguageWhereInput
  features_every: FeatureWhereInput
  features_some: FeatureWhereInput
  features_none: FeatureWhereInput
  AND: [FolkWhereInput!]
  OR: [FolkWhereInput!]
  NOT: [FolkWhereInput!]
}

input FolkWhereUniqueInput {
  id: ID
}

type Language {
  id: ID!
  name: String!
}

type LanguageConnection {
  pageInfo: PageInfo!
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  id: ID
  name: String!
}

input LanguageCreateManyInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

type LanguageEdge {
  node: Language!
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type LanguagePreviousValues {
  id: ID!
  name: String!
}

input LanguageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [LanguageScalarWhereInput!]
  OR: [LanguageScalarWhereInput!]
  NOT: [LanguageScalarWhereInput!]
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
  AND: [LanguageSubscriptionWhereInput!]
  OR: [LanguageSubscriptionWhereInput!]
  NOT: [LanguageSubscriptionWhereInput!]
}

input LanguageUpdateDataInput {
  name: String
}

input LanguageUpdateInput {
  name: String
}

input LanguageUpdateManyDataInput {
  name: String
}

input LanguageUpdateManyInput {
  create: [LanguageCreateInput!]
  update: [LanguageUpdateWithWhereUniqueNestedInput!]
  upsert: [LanguageUpsertWithWhereUniqueNestedInput!]
  delete: [LanguageWhereUniqueInput!]
  connect: [LanguageWhereUniqueInput!]
  set: [LanguageWhereUniqueInput!]
  disconnect: [LanguageWhereUniqueInput!]
  deleteMany: [LanguageScalarWhereInput!]
  updateMany: [LanguageUpdateManyWithWhereNestedInput!]
}

input LanguageUpdateManyMutationInput {
  name: String
}

input LanguageUpdateManyWithWhereNestedInput {
  where: LanguageScalarWhereInput!
  data: LanguageUpdateManyDataInput!
}

input LanguageUpdateWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateDataInput!
}

input LanguageUpsertWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
}

input LanguageWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCharacter(data: CharacterCreateInput!): Character!
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteManyCharacters(where: CharacterWhereInput): BatchPayload!
  createClass(data: ClassCreateInput!): Class!
  updateClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  upsertClass(where: ClassWhereUniqueInput!, create: ClassCreateInput!, update: ClassUpdateInput!): Class!
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteManyClasses(where: ClassWhereInput): BatchPayload!
  createFeature(data: FeatureCreateInput!): Feature!
  updateFeature(data: FeatureUpdateInput!, where: FeatureWhereUniqueInput!): Feature
  updateManyFeatures(data: FeatureUpdateManyMutationInput!, where: FeatureWhereInput): BatchPayload!
  upsertFeature(where: FeatureWhereUniqueInput!, create: FeatureCreateInput!, update: FeatureUpdateInput!): Feature!
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteManyFeatures(where: FeatureWhereInput): BatchPayload!
  createFolk(data: FolkCreateInput!): Folk!
  updateFolk(data: FolkUpdateInput!, where: FolkWhereUniqueInput!): Folk
  updateManyFolks(data: FolkUpdateManyMutationInput!, where: FolkWhereInput): BatchPayload!
  upsertFolk(where: FolkWhereUniqueInput!, create: FolkCreateInput!, update: FolkUpdateInput!): Folk!
  deleteFolk(where: FolkWhereUniqueInput!): Folk
  deleteManyFolks(where: FolkWhereInput): BatchPayload!
  createLanguage(data: LanguageCreateInput!): Language!
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  createStatBlock(data: StatBlockCreateInput!): StatBlock!
  updateStatBlock(data: StatBlockUpdateInput!, where: StatBlockWhereUniqueInput!): StatBlock
  updateManyStatBlocks(data: StatBlockUpdateManyMutationInput!, where: StatBlockWhereInput): BatchPayload!
  upsertStatBlock(where: StatBlockWhereUniqueInput!, create: StatBlockCreateInput!, update: StatBlockUpdateInput!): StatBlock!
  deleteStatBlock(where: StatBlockWhereUniqueInput!): StatBlock
  deleteManyStatBlocks(where: StatBlockWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  USER
  ADMIN
}

type Query {
  character(where: CharacterWhereUniqueInput!): Character
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character]!
  charactersConnection(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacterConnection!
  class(where: ClassWhereUniqueInput!): Class
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class]!
  classesConnection(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassConnection!
  feature(where: FeatureWhereUniqueInput!): Feature
  features(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feature]!
  featuresConnection(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeatureConnection!
  folk(where: FolkWhereUniqueInput!): Folk
  folks(where: FolkWhereInput, orderBy: FolkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folk]!
  folksConnection(where: FolkWhereInput, orderBy: FolkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FolkConnection!
  language(where: LanguageWhereUniqueInput!): Language
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  statBlock(where: StatBlockWhereUniqueInput!): StatBlock
  statBlocks(where: StatBlockWhereInput, orderBy: StatBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StatBlock]!
  statBlocksConnection(where: StatBlockWhereInput, orderBy: StatBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatBlockConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type StatBlock {
  id: ID!
  str: Int!
  con: Int!
  dex: Int!
  cha: Int!
  int: Int!
  wis: Int!
  strMod: Int!
  conMod: Int!
  dexMod: Int!
  chaMod: Int!
  intMod: Int!
  wisMod: Int!
}

type StatBlockConnection {
  pageInfo: PageInfo!
  edges: [StatBlockEdge]!
  aggregate: AggregateStatBlock!
}

input StatBlockCreateInput {
  id: ID
  str: Int!
  con: Int!
  dex: Int!
  cha: Int!
  int: Int!
  wis: Int!
  strMod: Int!
  conMod: Int!
  dexMod: Int!
  chaMod: Int!
  intMod: Int!
  wisMod: Int!
}

input StatBlockCreateOneInput {
  create: StatBlockCreateInput
  connect: StatBlockWhereUniqueInput
}

type StatBlockEdge {
  node: StatBlock!
  cursor: String!
}

enum StatBlockOrderByInput {
  id_ASC
  id_DESC
  str_ASC
  str_DESC
  con_ASC
  con_DESC
  dex_ASC
  dex_DESC
  cha_ASC
  cha_DESC
  int_ASC
  int_DESC
  wis_ASC
  wis_DESC
  strMod_ASC
  strMod_DESC
  conMod_ASC
  conMod_DESC
  dexMod_ASC
  dexMod_DESC
  chaMod_ASC
  chaMod_DESC
  intMod_ASC
  intMod_DESC
  wisMod_ASC
  wisMod_DESC
}

type StatBlockPreviousValues {
  id: ID!
  str: Int!
  con: Int!
  dex: Int!
  cha: Int!
  int: Int!
  wis: Int!
  strMod: Int!
  conMod: Int!
  dexMod: Int!
  chaMod: Int!
  intMod: Int!
  wisMod: Int!
}

type StatBlockSubscriptionPayload {
  mutation: MutationType!
  node: StatBlock
  updatedFields: [String!]
  previousValues: StatBlockPreviousValues
}

input StatBlockSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StatBlockWhereInput
  AND: [StatBlockSubscriptionWhereInput!]
  OR: [StatBlockSubscriptionWhereInput!]
  NOT: [StatBlockSubscriptionWhereInput!]
}

input StatBlockUpdateDataInput {
  str: Int
  con: Int
  dex: Int
  cha: Int
  int: Int
  wis: Int
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
}

input StatBlockUpdateInput {
  str: Int
  con: Int
  dex: Int
  cha: Int
  int: Int
  wis: Int
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
}

input StatBlockUpdateManyMutationInput {
  str: Int
  con: Int
  dex: Int
  cha: Int
  int: Int
  wis: Int
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
}

input StatBlockUpdateOneRequiredInput {
  create: StatBlockCreateInput
  update: StatBlockUpdateDataInput
  upsert: StatBlockUpsertNestedInput
  connect: StatBlockWhereUniqueInput
}

input StatBlockUpsertNestedInput {
  update: StatBlockUpdateDataInput!
  create: StatBlockCreateInput!
}

input StatBlockWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  str: Int
  str_not: Int
  str_in: [Int!]
  str_not_in: [Int!]
  str_lt: Int
  str_lte: Int
  str_gt: Int
  str_gte: Int
  con: Int
  con_not: Int
  con_in: [Int!]
  con_not_in: [Int!]
  con_lt: Int
  con_lte: Int
  con_gt: Int
  con_gte: Int
  dex: Int
  dex_not: Int
  dex_in: [Int!]
  dex_not_in: [Int!]
  dex_lt: Int
  dex_lte: Int
  dex_gt: Int
  dex_gte: Int
  cha: Int
  cha_not: Int
  cha_in: [Int!]
  cha_not_in: [Int!]
  cha_lt: Int
  cha_lte: Int
  cha_gt: Int
  cha_gte: Int
  int: Int
  int_not: Int
  int_in: [Int!]
  int_not_in: [Int!]
  int_lt: Int
  int_lte: Int
  int_gt: Int
  int_gte: Int
  wis: Int
  wis_not: Int
  wis_in: [Int!]
  wis_not_in: [Int!]
  wis_lt: Int
  wis_lte: Int
  wis_gt: Int
  wis_gte: Int
  strMod: Int
  strMod_not: Int
  strMod_in: [Int!]
  strMod_not_in: [Int!]
  strMod_lt: Int
  strMod_lte: Int
  strMod_gt: Int
  strMod_gte: Int
  conMod: Int
  conMod_not: Int
  conMod_in: [Int!]
  conMod_not_in: [Int!]
  conMod_lt: Int
  conMod_lte: Int
  conMod_gt: Int
  conMod_gte: Int
  dexMod: Int
  dexMod_not: Int
  dexMod_in: [Int!]
  dexMod_not_in: [Int!]
  dexMod_lt: Int
  dexMod_lte: Int
  dexMod_gt: Int
  dexMod_gte: Int
  chaMod: Int
  chaMod_not: Int
  chaMod_in: [Int!]
  chaMod_not_in: [Int!]
  chaMod_lt: Int
  chaMod_lte: Int
  chaMod_gt: Int
  chaMod_gte: Int
  intMod: Int
  intMod_not: Int
  intMod_in: [Int!]
  intMod_not_in: [Int!]
  intMod_lt: Int
  intMod_lte: Int
  intMod_gt: Int
  intMod_gte: Int
  wisMod: Int
  wisMod_not: Int
  wisMod_in: [Int!]
  wisMod_not_in: [Int!]
  wisMod_lt: Int
  wisMod_lte: Int
  wisMod_gt: Int
  wisMod_gte: Int
  AND: [StatBlockWhereInput!]
  OR: [StatBlockWhereInput!]
  NOT: [StatBlockWhereInput!]
}

input StatBlockWhereUniqueInput {
  id: ID
}

type Subscription {
  character(where: CharacterSubscriptionWhereInput): CharacterSubscriptionPayload
  class(where: ClassSubscriptionWhereInput): ClassSubscriptionPayload
  feature(where: FeatureSubscriptionWhereInput): FeatureSubscriptionPayload
  folk(where: FolkSubscriptionWhereInput): FolkSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  statBlock(where: StatBlockSubscriptionWhereInput): StatBlockSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: String
  resetTokenExpiry_not: String
  resetTokenExpiry_in: [String!]
  resetTokenExpiry_not_in: [String!]
  resetTokenExpiry_lt: String
  resetTokenExpiry_lte: String
  resetTokenExpiry_gt: String
  resetTokenExpiry_gte: String
  resetTokenExpiry_contains: String
  resetTokenExpiry_not_contains: String
  resetTokenExpiry_starts_with: String
  resetTokenExpiry_not_starts_with: String
  resetTokenExpiry_ends_with: String
  resetTokenExpiry_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
