// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  character: (where?: CharacterWhereInput) => Promise<boolean>;
  class: (where?: ClassWhereInput) => Promise<boolean>;
  die: (where?: DieWhereInput) => Promise<boolean>;
  feature: (where?: FeatureWhereInput) => Promise<boolean>;
  folk: (where?: FolkWhereInput) => Promise<boolean>;
  language: (where?: LanguageWhereInput) => Promise<boolean>;
  saveBlock: (where?: SaveBlockWhereInput) => Promise<boolean>;
  skillBlock: (where?: SkillBlockWhereInput) => Promise<boolean>;
  statBlock: (where?: StatBlockWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  character: (where: CharacterWhereUniqueInput) => CharacterNullablePromise;
  characters: (args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Character>;
  charactersConnection: (args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CharacterConnectionPromise;
  class: (where: ClassWhereUniqueInput) => ClassNullablePromise;
  classes: (args?: {
    where?: ClassWhereInput;
    orderBy?: ClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Class>;
  classesConnection: (args?: {
    where?: ClassWhereInput;
    orderBy?: ClassOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClassConnectionPromise;
  die: (where: DieWhereUniqueInput) => DieNullablePromise;
  dies: (args?: {
    where?: DieWhereInput;
    orderBy?: DieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Die>;
  diesConnection: (args?: {
    where?: DieWhereInput;
    orderBy?: DieOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DieConnectionPromise;
  feature: (where: FeatureWhereUniqueInput) => FeatureNullablePromise;
  features: (args?: {
    where?: FeatureWhereInput;
    orderBy?: FeatureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Feature>;
  featuresConnection: (args?: {
    where?: FeatureWhereInput;
    orderBy?: FeatureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FeatureConnectionPromise;
  folk: (where: FolkWhereUniqueInput) => FolkNullablePromise;
  folks: (args?: {
    where?: FolkWhereInput;
    orderBy?: FolkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Folk>;
  folksConnection: (args?: {
    where?: FolkWhereInput;
    orderBy?: FolkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FolkConnectionPromise;
  language: (where: LanguageWhereUniqueInput) => LanguageNullablePromise;
  languages: (args?: {
    where?: LanguageWhereInput;
    orderBy?: LanguageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Language>;
  languagesConnection: (args?: {
    where?: LanguageWhereInput;
    orderBy?: LanguageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LanguageConnectionPromise;
  saveBlock: (where: SaveBlockWhereUniqueInput) => SaveBlockNullablePromise;
  saveBlocks: (args?: {
    where?: SaveBlockWhereInput;
    orderBy?: SaveBlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SaveBlock>;
  saveBlocksConnection: (args?: {
    where?: SaveBlockWhereInput;
    orderBy?: SaveBlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SaveBlockConnectionPromise;
  skillBlock: (where: SkillBlockWhereUniqueInput) => SkillBlockNullablePromise;
  skillBlocks: (args?: {
    where?: SkillBlockWhereInput;
    orderBy?: SkillBlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SkillBlock>;
  skillBlocksConnection: (args?: {
    where?: SkillBlockWhereInput;
    orderBy?: SkillBlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SkillBlockConnectionPromise;
  statBlock: (where: StatBlockWhereUniqueInput) => StatBlockNullablePromise;
  statBlocks: (args?: {
    where?: StatBlockWhereInput;
    orderBy?: StatBlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<StatBlock>;
  statBlocksConnection: (args?: {
    where?: StatBlockWhereInput;
    orderBy?: StatBlockOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StatBlockConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCharacter: (data: CharacterCreateInput) => CharacterPromise;
  updateCharacter: (args: {
    data: CharacterUpdateInput;
    where: CharacterWhereUniqueInput;
  }) => CharacterPromise;
  updateManyCharacters: (args: {
    data: CharacterUpdateManyMutationInput;
    where?: CharacterWhereInput;
  }) => BatchPayloadPromise;
  upsertCharacter: (args: {
    where: CharacterWhereUniqueInput;
    create: CharacterCreateInput;
    update: CharacterUpdateInput;
  }) => CharacterPromise;
  deleteCharacter: (where: CharacterWhereUniqueInput) => CharacterPromise;
  deleteManyCharacters: (where?: CharacterWhereInput) => BatchPayloadPromise;
  createClass: (data: ClassCreateInput) => ClassPromise;
  updateClass: (args: {
    data: ClassUpdateInput;
    where: ClassWhereUniqueInput;
  }) => ClassPromise;
  updateManyClasses: (args: {
    data: ClassUpdateManyMutationInput;
    where?: ClassWhereInput;
  }) => BatchPayloadPromise;
  upsertClass: (args: {
    where: ClassWhereUniqueInput;
    create: ClassCreateInput;
    update: ClassUpdateInput;
  }) => ClassPromise;
  deleteClass: (where: ClassWhereUniqueInput) => ClassPromise;
  deleteManyClasses: (where?: ClassWhereInput) => BatchPayloadPromise;
  createDie: (data: DieCreateInput) => DiePromise;
  updateDie: (args: {
    data: DieUpdateInput;
    where: DieWhereUniqueInput;
  }) => DiePromise;
  updateManyDies: (args: {
    data: DieUpdateManyMutationInput;
    where?: DieWhereInput;
  }) => BatchPayloadPromise;
  upsertDie: (args: {
    where: DieWhereUniqueInput;
    create: DieCreateInput;
    update: DieUpdateInput;
  }) => DiePromise;
  deleteDie: (where: DieWhereUniqueInput) => DiePromise;
  deleteManyDies: (where?: DieWhereInput) => BatchPayloadPromise;
  createFeature: (data: FeatureCreateInput) => FeaturePromise;
  updateFeature: (args: {
    data: FeatureUpdateInput;
    where: FeatureWhereUniqueInput;
  }) => FeaturePromise;
  updateManyFeatures: (args: {
    data: FeatureUpdateManyMutationInput;
    where?: FeatureWhereInput;
  }) => BatchPayloadPromise;
  upsertFeature: (args: {
    where: FeatureWhereUniqueInput;
    create: FeatureCreateInput;
    update: FeatureUpdateInput;
  }) => FeaturePromise;
  deleteFeature: (where: FeatureWhereUniqueInput) => FeaturePromise;
  deleteManyFeatures: (where?: FeatureWhereInput) => BatchPayloadPromise;
  createFolk: (data: FolkCreateInput) => FolkPromise;
  updateFolk: (args: {
    data: FolkUpdateInput;
    where: FolkWhereUniqueInput;
  }) => FolkPromise;
  updateManyFolks: (args: {
    data: FolkUpdateManyMutationInput;
    where?: FolkWhereInput;
  }) => BatchPayloadPromise;
  upsertFolk: (args: {
    where: FolkWhereUniqueInput;
    create: FolkCreateInput;
    update: FolkUpdateInput;
  }) => FolkPromise;
  deleteFolk: (where: FolkWhereUniqueInput) => FolkPromise;
  deleteManyFolks: (where?: FolkWhereInput) => BatchPayloadPromise;
  createLanguage: (data: LanguageCreateInput) => LanguagePromise;
  updateLanguage: (args: {
    data: LanguageUpdateInput;
    where: LanguageWhereUniqueInput;
  }) => LanguagePromise;
  updateManyLanguages: (args: {
    data: LanguageUpdateManyMutationInput;
    where?: LanguageWhereInput;
  }) => BatchPayloadPromise;
  upsertLanguage: (args: {
    where: LanguageWhereUniqueInput;
    create: LanguageCreateInput;
    update: LanguageUpdateInput;
  }) => LanguagePromise;
  deleteLanguage: (where: LanguageWhereUniqueInput) => LanguagePromise;
  deleteManyLanguages: (where?: LanguageWhereInput) => BatchPayloadPromise;
  createSaveBlock: (data: SaveBlockCreateInput) => SaveBlockPromise;
  deleteSaveBlock: (where: SaveBlockWhereUniqueInput) => SaveBlockPromise;
  deleteManySaveBlocks: (where?: SaveBlockWhereInput) => BatchPayloadPromise;
  createSkillBlock: (data: SkillBlockCreateInput) => SkillBlockPromise;
  deleteSkillBlock: (where: SkillBlockWhereUniqueInput) => SkillBlockPromise;
  deleteManySkillBlocks: (where?: SkillBlockWhereInput) => BatchPayloadPromise;
  createStatBlock: (data: StatBlockCreateInput) => StatBlockPromise;
  updateStatBlock: (args: {
    data: StatBlockUpdateInput;
    where: StatBlockWhereUniqueInput;
  }) => StatBlockPromise;
  updateManyStatBlocks: (args: {
    data: StatBlockUpdateManyMutationInput;
    where?: StatBlockWhereInput;
  }) => BatchPayloadPromise;
  upsertStatBlock: (args: {
    where: StatBlockWhereUniqueInput;
    create: StatBlockCreateInput;
    update: StatBlockUpdateInput;
  }) => StatBlockPromise;
  deleteStatBlock: (where: StatBlockWhereUniqueInput) => StatBlockPromise;
  deleteManyStatBlocks: (where?: StatBlockWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  character: (
    where?: CharacterSubscriptionWhereInput
  ) => CharacterSubscriptionPayloadSubscription;
  class: (
    where?: ClassSubscriptionWhereInput
  ) => ClassSubscriptionPayloadSubscription;
  die: (
    where?: DieSubscriptionWhereInput
  ) => DieSubscriptionPayloadSubscription;
  feature: (
    where?: FeatureSubscriptionWhereInput
  ) => FeatureSubscriptionPayloadSubscription;
  folk: (
    where?: FolkSubscriptionWhereInput
  ) => FolkSubscriptionPayloadSubscription;
  language: (
    where?: LanguageSubscriptionWhereInput
  ) => LanguageSubscriptionPayloadSubscription;
  saveBlock: (
    where?: SaveBlockSubscriptionWhereInput
  ) => SaveBlockSubscriptionPayloadSubscription;
  skillBlock: (
    where?: SkillBlockSubscriptionWhereInput
  ) => SkillBlockSubscriptionPayloadSubscription;
  statBlock: (
    where?: StatBlockSubscriptionWhereInput
  ) => StatBlockSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LanguageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type FeatureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type CharacterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "acCalc_ASC"
  | "acCalc_DESC"
  | "maxHp_ASC"
  | "maxHp_DESC"
  | "profBonus_ASC"
  | "profBonus_DESC";

export type ClassOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "level_ASC"
  | "level_DESC";

export type DieOrderByInput = "id_ASC" | "id_DESC" | "faces_ASC" | "faces_DESC";

export type FolkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "strMod_ASC"
  | "strMod_DESC"
  | "conMod_ASC"
  | "conMod_DESC"
  | "dexMod_ASC"
  | "dexMod_DESC"
  | "chaMod_ASC"
  | "chaMod_DESC"
  | "intMod_ASC"
  | "intMod_DESC"
  | "wisMod_ASC"
  | "wisMod_DESC"
  | "speed_ASC"
  | "speed_DESC";

export type SaveBlockOrderByInput = "id_ASC" | "id_DESC";

export type SkillBlockOrderByInput = "id_ASC" | "id_DESC";

export type StatBlockOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "str_ASC"
  | "str_DESC"
  | "con_ASC"
  | "con_DESC"
  | "dex_ASC"
  | "dex_DESC"
  | "cha_ASC"
  | "cha_DESC"
  | "int_ASC"
  | "int_DESC"
  | "wis_ASC"
  | "wis_DESC"
  | "strMod_ASC"
  | "strMod_DESC"
  | "conMod_ASC"
  | "conMod_DESC"
  | "dexMod_ASC"
  | "dexMod_DESC"
  | "chaMod_ASC"
  | "chaMod_DESC"
  | "intMod_ASC"
  | "intMod_DESC"
  | "wisMod_ASC"
  | "wisMod_DESC";

export type Permission = "USER" | "ADMIN";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CharacterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LanguageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<LanguageWhereInput[] | LanguageWhereInput>;
  OR?: Maybe<LanguageWhereInput[] | LanguageWhereInput>;
  NOT?: Maybe<LanguageWhereInput[] | LanguageWhereInput>;
}

export interface FeatureWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  fromFolk?: Maybe<FolkWhereInput>;
  fromClass?: Maybe<ClassWhereInput>;
  AND?: Maybe<FeatureWhereInput[] | FeatureWhereInput>;
  OR?: Maybe<FeatureWhereInput[] | FeatureWhereInput>;
  NOT?: Maybe<FeatureWhereInput[] | FeatureWhereInput>;
}

export interface FolkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  strMod?: Maybe<Int>;
  strMod_not?: Maybe<Int>;
  strMod_in?: Maybe<Int[] | Int>;
  strMod_not_in?: Maybe<Int[] | Int>;
  strMod_lt?: Maybe<Int>;
  strMod_lte?: Maybe<Int>;
  strMod_gt?: Maybe<Int>;
  strMod_gte?: Maybe<Int>;
  conMod?: Maybe<Int>;
  conMod_not?: Maybe<Int>;
  conMod_in?: Maybe<Int[] | Int>;
  conMod_not_in?: Maybe<Int[] | Int>;
  conMod_lt?: Maybe<Int>;
  conMod_lte?: Maybe<Int>;
  conMod_gt?: Maybe<Int>;
  conMod_gte?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  dexMod_not?: Maybe<Int>;
  dexMod_in?: Maybe<Int[] | Int>;
  dexMod_not_in?: Maybe<Int[] | Int>;
  dexMod_lt?: Maybe<Int>;
  dexMod_lte?: Maybe<Int>;
  dexMod_gt?: Maybe<Int>;
  dexMod_gte?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  chaMod_not?: Maybe<Int>;
  chaMod_in?: Maybe<Int[] | Int>;
  chaMod_not_in?: Maybe<Int[] | Int>;
  chaMod_lt?: Maybe<Int>;
  chaMod_lte?: Maybe<Int>;
  chaMod_gt?: Maybe<Int>;
  chaMod_gte?: Maybe<Int>;
  intMod?: Maybe<Int>;
  intMod_not?: Maybe<Int>;
  intMod_in?: Maybe<Int[] | Int>;
  intMod_not_in?: Maybe<Int[] | Int>;
  intMod_lt?: Maybe<Int>;
  intMod_lte?: Maybe<Int>;
  intMod_gt?: Maybe<Int>;
  intMod_gte?: Maybe<Int>;
  wisMod?: Maybe<Int>;
  wisMod_not?: Maybe<Int>;
  wisMod_in?: Maybe<Int[] | Int>;
  wisMod_not_in?: Maybe<Int[] | Int>;
  wisMod_lt?: Maybe<Int>;
  wisMod_lte?: Maybe<Int>;
  wisMod_gt?: Maybe<Int>;
  wisMod_gte?: Maybe<Int>;
  speed?: Maybe<Int>;
  speed_not?: Maybe<Int>;
  speed_in?: Maybe<Int[] | Int>;
  speed_not_in?: Maybe<Int[] | Int>;
  speed_lt?: Maybe<Int>;
  speed_lte?: Maybe<Int>;
  speed_gt?: Maybe<Int>;
  speed_gte?: Maybe<Int>;
  languages_every?: Maybe<LanguageWhereInput>;
  languages_some?: Maybe<LanguageWhereInput>;
  languages_none?: Maybe<LanguageWhereInput>;
  features_every?: Maybe<FeatureWhereInput>;
  features_some?: Maybe<FeatureWhereInput>;
  features_none?: Maybe<FeatureWhereInput>;
  AND?: Maybe<FolkWhereInput[] | FolkWhereInput>;
  OR?: Maybe<FolkWhereInput[] | FolkWhereInput>;
  NOT?: Maybe<FolkWhereInput[] | FolkWhereInput>;
}

export interface ClassWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  level?: Maybe<Int>;
  level_not?: Maybe<Int>;
  level_in?: Maybe<Int[] | Int>;
  level_not_in?: Maybe<Int[] | Int>;
  level_lt?: Maybe<Int>;
  level_lte?: Maybe<Int>;
  level_gt?: Maybe<Int>;
  level_gte?: Maybe<Int>;
  AND?: Maybe<ClassWhereInput[] | ClassWhereInput>;
  OR?: Maybe<ClassWhereInput[] | ClassWhereInput>;
  NOT?: Maybe<ClassWhereInput[] | ClassWhereInput>;
}

export interface CharacterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  class?: Maybe<ClassWhereInput>;
  folk?: Maybe<FolkWhereInput>;
  statblock?: Maybe<StatBlockWhereInput>;
  skills?: Maybe<SkillBlockWhereInput>;
  saves?: Maybe<SaveBlockWhereInput>;
  acCalc?: Maybe<String>;
  acCalc_not?: Maybe<String>;
  acCalc_in?: Maybe<String[] | String>;
  acCalc_not_in?: Maybe<String[] | String>;
  acCalc_lt?: Maybe<String>;
  acCalc_lte?: Maybe<String>;
  acCalc_gt?: Maybe<String>;
  acCalc_gte?: Maybe<String>;
  acCalc_contains?: Maybe<String>;
  acCalc_not_contains?: Maybe<String>;
  acCalc_starts_with?: Maybe<String>;
  acCalc_not_starts_with?: Maybe<String>;
  acCalc_ends_with?: Maybe<String>;
  acCalc_not_ends_with?: Maybe<String>;
  hitDie?: Maybe<DieWhereInput>;
  maxHp?: Maybe<Int>;
  maxHp_not?: Maybe<Int>;
  maxHp_in?: Maybe<Int[] | Int>;
  maxHp_not_in?: Maybe<Int[] | Int>;
  maxHp_lt?: Maybe<Int>;
  maxHp_lte?: Maybe<Int>;
  maxHp_gt?: Maybe<Int>;
  maxHp_gte?: Maybe<Int>;
  profBonus?: Maybe<Int>;
  profBonus_not?: Maybe<Int>;
  profBonus_in?: Maybe<Int[] | Int>;
  profBonus_not_in?: Maybe<Int[] | Int>;
  profBonus_lt?: Maybe<Int>;
  profBonus_lte?: Maybe<Int>;
  profBonus_gt?: Maybe<Int>;
  profBonus_gte?: Maybe<Int>;
  AND?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
  OR?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
  NOT?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
}

export interface StatBlockWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  str?: Maybe<Int>;
  str_not?: Maybe<Int>;
  str_in?: Maybe<Int[] | Int>;
  str_not_in?: Maybe<Int[] | Int>;
  str_lt?: Maybe<Int>;
  str_lte?: Maybe<Int>;
  str_gt?: Maybe<Int>;
  str_gte?: Maybe<Int>;
  con?: Maybe<Int>;
  con_not?: Maybe<Int>;
  con_in?: Maybe<Int[] | Int>;
  con_not_in?: Maybe<Int[] | Int>;
  con_lt?: Maybe<Int>;
  con_lte?: Maybe<Int>;
  con_gt?: Maybe<Int>;
  con_gte?: Maybe<Int>;
  dex?: Maybe<Int>;
  dex_not?: Maybe<Int>;
  dex_in?: Maybe<Int[] | Int>;
  dex_not_in?: Maybe<Int[] | Int>;
  dex_lt?: Maybe<Int>;
  dex_lte?: Maybe<Int>;
  dex_gt?: Maybe<Int>;
  dex_gte?: Maybe<Int>;
  cha?: Maybe<Int>;
  cha_not?: Maybe<Int>;
  cha_in?: Maybe<Int[] | Int>;
  cha_not_in?: Maybe<Int[] | Int>;
  cha_lt?: Maybe<Int>;
  cha_lte?: Maybe<Int>;
  cha_gt?: Maybe<Int>;
  cha_gte?: Maybe<Int>;
  int?: Maybe<Int>;
  int_not?: Maybe<Int>;
  int_in?: Maybe<Int[] | Int>;
  int_not_in?: Maybe<Int[] | Int>;
  int_lt?: Maybe<Int>;
  int_lte?: Maybe<Int>;
  int_gt?: Maybe<Int>;
  int_gte?: Maybe<Int>;
  wis?: Maybe<Int>;
  wis_not?: Maybe<Int>;
  wis_in?: Maybe<Int[] | Int>;
  wis_not_in?: Maybe<Int[] | Int>;
  wis_lt?: Maybe<Int>;
  wis_lte?: Maybe<Int>;
  wis_gt?: Maybe<Int>;
  wis_gte?: Maybe<Int>;
  strMod?: Maybe<Int>;
  strMod_not?: Maybe<Int>;
  strMod_in?: Maybe<Int[] | Int>;
  strMod_not_in?: Maybe<Int[] | Int>;
  strMod_lt?: Maybe<Int>;
  strMod_lte?: Maybe<Int>;
  strMod_gt?: Maybe<Int>;
  strMod_gte?: Maybe<Int>;
  conMod?: Maybe<Int>;
  conMod_not?: Maybe<Int>;
  conMod_in?: Maybe<Int[] | Int>;
  conMod_not_in?: Maybe<Int[] | Int>;
  conMod_lt?: Maybe<Int>;
  conMod_lte?: Maybe<Int>;
  conMod_gt?: Maybe<Int>;
  conMod_gte?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  dexMod_not?: Maybe<Int>;
  dexMod_in?: Maybe<Int[] | Int>;
  dexMod_not_in?: Maybe<Int[] | Int>;
  dexMod_lt?: Maybe<Int>;
  dexMod_lte?: Maybe<Int>;
  dexMod_gt?: Maybe<Int>;
  dexMod_gte?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  chaMod_not?: Maybe<Int>;
  chaMod_in?: Maybe<Int[] | Int>;
  chaMod_not_in?: Maybe<Int[] | Int>;
  chaMod_lt?: Maybe<Int>;
  chaMod_lte?: Maybe<Int>;
  chaMod_gt?: Maybe<Int>;
  chaMod_gte?: Maybe<Int>;
  intMod?: Maybe<Int>;
  intMod_not?: Maybe<Int>;
  intMod_in?: Maybe<Int[] | Int>;
  intMod_not_in?: Maybe<Int[] | Int>;
  intMod_lt?: Maybe<Int>;
  intMod_lte?: Maybe<Int>;
  intMod_gt?: Maybe<Int>;
  intMod_gte?: Maybe<Int>;
  wisMod?: Maybe<Int>;
  wisMod_not?: Maybe<Int>;
  wisMod_in?: Maybe<Int[] | Int>;
  wisMod_not_in?: Maybe<Int[] | Int>;
  wisMod_lt?: Maybe<Int>;
  wisMod_lte?: Maybe<Int>;
  wisMod_gt?: Maybe<Int>;
  wisMod_gte?: Maybe<Int>;
  AND?: Maybe<StatBlockWhereInput[] | StatBlockWhereInput>;
  OR?: Maybe<StatBlockWhereInput[] | StatBlockWhereInput>;
  NOT?: Maybe<StatBlockWhereInput[] | StatBlockWhereInput>;
}

export interface SkillBlockWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<SkillBlockWhereInput[] | SkillBlockWhereInput>;
  OR?: Maybe<SkillBlockWhereInput[] | SkillBlockWhereInput>;
  NOT?: Maybe<SkillBlockWhereInput[] | SkillBlockWhereInput>;
}

export interface SaveBlockWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<SaveBlockWhereInput[] | SaveBlockWhereInput>;
  OR?: Maybe<SaveBlockWhereInput[] | SaveBlockWhereInput>;
  NOT?: Maybe<SaveBlockWhereInput[] | SaveBlockWhereInput>;
}

export interface DieWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  faces?: Maybe<Int>;
  faces_not?: Maybe<Int>;
  faces_in?: Maybe<Int[] | Int>;
  faces_not_in?: Maybe<Int[] | Int>;
  faces_lt?: Maybe<Int>;
  faces_lte?: Maybe<Int>;
  faces_gt?: Maybe<Int>;
  faces_gte?: Maybe<Int>;
  AND?: Maybe<DieWhereInput[] | DieWhereInput>;
  OR?: Maybe<DieWhereInput[] | DieWhereInput>;
  NOT?: Maybe<DieWhereInput[] | DieWhereInput>;
}

export type ClassWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type DieWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FeatureWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FolkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LanguageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SaveBlockWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SkillBlockWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type StatBlockWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  resetTokenExpiry_not?: Maybe<String>;
  resetTokenExpiry_in?: Maybe<String[] | String>;
  resetTokenExpiry_not_in?: Maybe<String[] | String>;
  resetTokenExpiry_lt?: Maybe<String>;
  resetTokenExpiry_lte?: Maybe<String>;
  resetTokenExpiry_gt?: Maybe<String>;
  resetTokenExpiry_gte?: Maybe<String>;
  resetTokenExpiry_contains?: Maybe<String>;
  resetTokenExpiry_not_contains?: Maybe<String>;
  resetTokenExpiry_starts_with?: Maybe<String>;
  resetTokenExpiry_not_starts_with?: Maybe<String>;
  resetTokenExpiry_ends_with?: Maybe<String>;
  resetTokenExpiry_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CharacterCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  class: ClassCreateOneInput;
  folk: FolkCreateOneInput;
  statblock: StatBlockCreateOneInput;
  skills: SkillBlockCreateOneInput;
  saves: SaveBlockCreateOneInput;
  acCalc: String;
  hitDie: DieCreateOneInput;
  maxHp: Int;
  profBonus: Int;
}

export interface ClassCreateOneInput {
  create?: Maybe<ClassCreateInput>;
  connect?: Maybe<ClassWhereUniqueInput>;
}

export interface ClassCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  level?: Maybe<Int>;
}

export interface FolkCreateOneInput {
  create?: Maybe<FolkCreateInput>;
  connect?: Maybe<FolkWhereUniqueInput>;
}

export interface FolkCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
  speed: Int;
  languages?: Maybe<LanguageCreateManyInput>;
  features?: Maybe<FeatureCreateManyWithoutFromFolkInput>;
}

export interface LanguageCreateManyInput {
  create?: Maybe<LanguageCreateInput[] | LanguageCreateInput>;
  connect?: Maybe<LanguageWhereUniqueInput[] | LanguageWhereUniqueInput>;
}

export interface LanguageCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface FeatureCreateManyWithoutFromFolkInput {
  create?: Maybe<
    FeatureCreateWithoutFromFolkInput[] | FeatureCreateWithoutFromFolkInput
  >;
  connect?: Maybe<FeatureWhereUniqueInput[] | FeatureWhereUniqueInput>;
}

export interface FeatureCreateWithoutFromFolkInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  effects?: Maybe<FeatureCreateeffectsInput>;
  fromClass?: Maybe<ClassCreateOneInput>;
}

export interface FeatureCreateeffectsInput {
  set?: Maybe<String[] | String>;
}

export interface StatBlockCreateOneInput {
  create?: Maybe<StatBlockCreateInput>;
  connect?: Maybe<StatBlockWhereUniqueInput>;
}

export interface StatBlockCreateInput {
  id?: Maybe<ID_Input>;
  str: Int;
  con: Int;
  dex: Int;
  cha: Int;
  int: Int;
  wis: Int;
  strMod: Int;
  conMod: Int;
  dexMod: Int;
  chaMod: Int;
  intMod: Int;
  wisMod: Int;
}

export interface SkillBlockCreateOneInput {
  create?: Maybe<SkillBlockCreateInput>;
  connect?: Maybe<SkillBlockWhereUniqueInput>;
}

export interface SkillBlockCreateInput {
  id?: Maybe<ID_Input>;
}

export interface SaveBlockCreateOneInput {
  create?: Maybe<SaveBlockCreateInput>;
  connect?: Maybe<SaveBlockWhereUniqueInput>;
}

export interface SaveBlockCreateInput {
  id?: Maybe<ID_Input>;
}

export interface DieCreateOneInput {
  create?: Maybe<DieCreateInput>;
  connect?: Maybe<DieWhereUniqueInput>;
}

export interface DieCreateInput {
  id?: Maybe<ID_Input>;
  faces: Int;
}

export interface CharacterUpdateInput {
  name?: Maybe<String>;
  class?: Maybe<ClassUpdateOneRequiredInput>;
  folk?: Maybe<FolkUpdateOneRequiredInput>;
  statblock?: Maybe<StatBlockUpdateOneRequiredInput>;
  skills?: Maybe<SkillBlockUpdateOneRequiredInput>;
  saves?: Maybe<SaveBlockUpdateOneRequiredInput>;
  acCalc?: Maybe<String>;
  hitDie?: Maybe<DieUpdateOneRequiredInput>;
  maxHp?: Maybe<Int>;
  profBonus?: Maybe<Int>;
}

export interface ClassUpdateOneRequiredInput {
  create?: Maybe<ClassCreateInput>;
  update?: Maybe<ClassUpdateDataInput>;
  upsert?: Maybe<ClassUpsertNestedInput>;
  connect?: Maybe<ClassWhereUniqueInput>;
}

export interface ClassUpdateDataInput {
  name?: Maybe<String>;
  level?: Maybe<Int>;
}

export interface ClassUpsertNestedInput {
  update: ClassUpdateDataInput;
  create: ClassCreateInput;
}

export interface FolkUpdateOneRequiredInput {
  create?: Maybe<FolkCreateInput>;
  update?: Maybe<FolkUpdateDataInput>;
  upsert?: Maybe<FolkUpsertNestedInput>;
  connect?: Maybe<FolkWhereUniqueInput>;
}

export interface FolkUpdateDataInput {
  name?: Maybe<String>;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
  speed?: Maybe<Int>;
  languages?: Maybe<LanguageUpdateManyInput>;
  features?: Maybe<FeatureUpdateManyWithoutFromFolkInput>;
}

export interface LanguageUpdateManyInput {
  create?: Maybe<LanguageCreateInput[] | LanguageCreateInput>;
  update?: Maybe<
    | LanguageUpdateWithWhereUniqueNestedInput[]
    | LanguageUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | LanguageUpsertWithWhereUniqueNestedInput[]
    | LanguageUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<LanguageWhereUniqueInput[] | LanguageWhereUniqueInput>;
  connect?: Maybe<LanguageWhereUniqueInput[] | LanguageWhereUniqueInput>;
  set?: Maybe<LanguageWhereUniqueInput[] | LanguageWhereUniqueInput>;
  disconnect?: Maybe<LanguageWhereUniqueInput[] | LanguageWhereUniqueInput>;
  deleteMany?: Maybe<LanguageScalarWhereInput[] | LanguageScalarWhereInput>;
  updateMany?: Maybe<
    | LanguageUpdateManyWithWhereNestedInput[]
    | LanguageUpdateManyWithWhereNestedInput
  >;
}

export interface LanguageUpdateWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput;
  data: LanguageUpdateDataInput;
}

export interface LanguageUpdateDataInput {
  name?: Maybe<String>;
}

export interface LanguageUpsertWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput;
  update: LanguageUpdateDataInput;
  create: LanguageCreateInput;
}

export interface LanguageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<LanguageScalarWhereInput[] | LanguageScalarWhereInput>;
  OR?: Maybe<LanguageScalarWhereInput[] | LanguageScalarWhereInput>;
  NOT?: Maybe<LanguageScalarWhereInput[] | LanguageScalarWhereInput>;
}

export interface LanguageUpdateManyWithWhereNestedInput {
  where: LanguageScalarWhereInput;
  data: LanguageUpdateManyDataInput;
}

export interface LanguageUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface FeatureUpdateManyWithoutFromFolkInput {
  create?: Maybe<
    FeatureCreateWithoutFromFolkInput[] | FeatureCreateWithoutFromFolkInput
  >;
  delete?: Maybe<FeatureWhereUniqueInput[] | FeatureWhereUniqueInput>;
  connect?: Maybe<FeatureWhereUniqueInput[] | FeatureWhereUniqueInput>;
  set?: Maybe<FeatureWhereUniqueInput[] | FeatureWhereUniqueInput>;
  disconnect?: Maybe<FeatureWhereUniqueInput[] | FeatureWhereUniqueInput>;
  update?: Maybe<
    | FeatureUpdateWithWhereUniqueWithoutFromFolkInput[]
    | FeatureUpdateWithWhereUniqueWithoutFromFolkInput
  >;
  upsert?: Maybe<
    | FeatureUpsertWithWhereUniqueWithoutFromFolkInput[]
    | FeatureUpsertWithWhereUniqueWithoutFromFolkInput
  >;
  deleteMany?: Maybe<FeatureScalarWhereInput[] | FeatureScalarWhereInput>;
  updateMany?: Maybe<
    | FeatureUpdateManyWithWhereNestedInput[]
    | FeatureUpdateManyWithWhereNestedInput
  >;
}

export interface FeatureUpdateWithWhereUniqueWithoutFromFolkInput {
  where: FeatureWhereUniqueInput;
  data: FeatureUpdateWithoutFromFolkDataInput;
}

export interface FeatureUpdateWithoutFromFolkDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  effects?: Maybe<FeatureUpdateeffectsInput>;
  fromClass?: Maybe<ClassUpdateOneInput>;
}

export interface FeatureUpdateeffectsInput {
  set?: Maybe<String[] | String>;
}

export interface ClassUpdateOneInput {
  create?: Maybe<ClassCreateInput>;
  update?: Maybe<ClassUpdateDataInput>;
  upsert?: Maybe<ClassUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClassWhereUniqueInput>;
}

export interface FeatureUpsertWithWhereUniqueWithoutFromFolkInput {
  where: FeatureWhereUniqueInput;
  update: FeatureUpdateWithoutFromFolkDataInput;
  create: FeatureCreateWithoutFromFolkInput;
}

export interface FeatureScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<FeatureScalarWhereInput[] | FeatureScalarWhereInput>;
  OR?: Maybe<FeatureScalarWhereInput[] | FeatureScalarWhereInput>;
  NOT?: Maybe<FeatureScalarWhereInput[] | FeatureScalarWhereInput>;
}

export interface FeatureUpdateManyWithWhereNestedInput {
  where: FeatureScalarWhereInput;
  data: FeatureUpdateManyDataInput;
}

export interface FeatureUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  effects?: Maybe<FeatureUpdateeffectsInput>;
}

export interface FolkUpsertNestedInput {
  update: FolkUpdateDataInput;
  create: FolkCreateInput;
}

export interface StatBlockUpdateOneRequiredInput {
  create?: Maybe<StatBlockCreateInput>;
  update?: Maybe<StatBlockUpdateDataInput>;
  upsert?: Maybe<StatBlockUpsertNestedInput>;
  connect?: Maybe<StatBlockWhereUniqueInput>;
}

export interface StatBlockUpdateDataInput {
  str?: Maybe<Int>;
  con?: Maybe<Int>;
  dex?: Maybe<Int>;
  cha?: Maybe<Int>;
  int?: Maybe<Int>;
  wis?: Maybe<Int>;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
}

export interface StatBlockUpsertNestedInput {
  update: StatBlockUpdateDataInput;
  create: StatBlockCreateInput;
}

export interface SkillBlockUpdateOneRequiredInput {
  create?: Maybe<SkillBlockCreateInput>;
  connect?: Maybe<SkillBlockWhereUniqueInput>;
}

export interface SaveBlockUpdateOneRequiredInput {
  create?: Maybe<SaveBlockCreateInput>;
  connect?: Maybe<SaveBlockWhereUniqueInput>;
}

export interface DieUpdateOneRequiredInput {
  create?: Maybe<DieCreateInput>;
  update?: Maybe<DieUpdateDataInput>;
  upsert?: Maybe<DieUpsertNestedInput>;
  connect?: Maybe<DieWhereUniqueInput>;
}

export interface DieUpdateDataInput {
  faces?: Maybe<Int>;
}

export interface DieUpsertNestedInput {
  update: DieUpdateDataInput;
  create: DieCreateInput;
}

export interface CharacterUpdateManyMutationInput {
  name?: Maybe<String>;
  acCalc?: Maybe<String>;
  maxHp?: Maybe<Int>;
  profBonus?: Maybe<Int>;
}

export interface ClassUpdateInput {
  name?: Maybe<String>;
  level?: Maybe<Int>;
}

export interface ClassUpdateManyMutationInput {
  name?: Maybe<String>;
  level?: Maybe<Int>;
}

export interface DieUpdateInput {
  faces?: Maybe<Int>;
}

export interface DieUpdateManyMutationInput {
  faces?: Maybe<Int>;
}

export interface FeatureCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  effects?: Maybe<FeatureCreateeffectsInput>;
  fromFolk?: Maybe<FolkCreateOneWithoutFeaturesInput>;
  fromClass?: Maybe<ClassCreateOneInput>;
}

export interface FolkCreateOneWithoutFeaturesInput {
  create?: Maybe<FolkCreateWithoutFeaturesInput>;
  connect?: Maybe<FolkWhereUniqueInput>;
}

export interface FolkCreateWithoutFeaturesInput {
  id?: Maybe<ID_Input>;
  name: String;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
  speed: Int;
  languages?: Maybe<LanguageCreateManyInput>;
}

export interface FeatureUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  effects?: Maybe<FeatureUpdateeffectsInput>;
  fromFolk?: Maybe<FolkUpdateOneWithoutFeaturesInput>;
  fromClass?: Maybe<ClassUpdateOneInput>;
}

export interface FolkUpdateOneWithoutFeaturesInput {
  create?: Maybe<FolkCreateWithoutFeaturesInput>;
  update?: Maybe<FolkUpdateWithoutFeaturesDataInput>;
  upsert?: Maybe<FolkUpsertWithoutFeaturesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FolkWhereUniqueInput>;
}

export interface FolkUpdateWithoutFeaturesDataInput {
  name?: Maybe<String>;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
  speed?: Maybe<Int>;
  languages?: Maybe<LanguageUpdateManyInput>;
}

export interface FolkUpsertWithoutFeaturesInput {
  update: FolkUpdateWithoutFeaturesDataInput;
  create: FolkCreateWithoutFeaturesInput;
}

export interface FeatureUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  effects?: Maybe<FeatureUpdateeffectsInput>;
}

export interface FolkUpdateInput {
  name?: Maybe<String>;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
  speed?: Maybe<Int>;
  languages?: Maybe<LanguageUpdateManyInput>;
  features?: Maybe<FeatureUpdateManyWithoutFromFolkInput>;
}

export interface FolkUpdateManyMutationInput {
  name?: Maybe<String>;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
  speed?: Maybe<Int>;
}

export interface LanguageUpdateInput {
  name?: Maybe<String>;
}

export interface LanguageUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface StatBlockUpdateInput {
  str?: Maybe<Int>;
  con?: Maybe<Int>;
  dex?: Maybe<Int>;
  cha?: Maybe<Int>;
  int?: Maybe<Int>;
  wis?: Maybe<Int>;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
}

export interface StatBlockUpdateManyMutationInput {
  str?: Maybe<Int>;
  con?: Maybe<Int>;
  dex?: Maybe<Int>;
  cha?: Maybe<Int>;
  int?: Maybe<Int>;
  wis?: Maybe<Int>;
  strMod?: Maybe<Int>;
  conMod?: Maybe<Int>;
  dexMod?: Maybe<Int>;
  chaMod?: Maybe<Int>;
  intMod?: Maybe<Int>;
  wisMod?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface UserCreatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface UserUpdatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface CharacterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CharacterWhereInput>;
  AND?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
  OR?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
}

export interface ClassSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClassWhereInput>;
  AND?: Maybe<ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput>;
  OR?: Maybe<ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput>;
  NOT?: Maybe<ClassSubscriptionWhereInput[] | ClassSubscriptionWhereInput>;
}

export interface DieSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DieWhereInput>;
  AND?: Maybe<DieSubscriptionWhereInput[] | DieSubscriptionWhereInput>;
  OR?: Maybe<DieSubscriptionWhereInput[] | DieSubscriptionWhereInput>;
  NOT?: Maybe<DieSubscriptionWhereInput[] | DieSubscriptionWhereInput>;
}

export interface FeatureSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FeatureWhereInput>;
  AND?: Maybe<FeatureSubscriptionWhereInput[] | FeatureSubscriptionWhereInput>;
  OR?: Maybe<FeatureSubscriptionWhereInput[] | FeatureSubscriptionWhereInput>;
  NOT?: Maybe<FeatureSubscriptionWhereInput[] | FeatureSubscriptionWhereInput>;
}

export interface FolkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FolkWhereInput>;
  AND?: Maybe<FolkSubscriptionWhereInput[] | FolkSubscriptionWhereInput>;
  OR?: Maybe<FolkSubscriptionWhereInput[] | FolkSubscriptionWhereInput>;
  NOT?: Maybe<FolkSubscriptionWhereInput[] | FolkSubscriptionWhereInput>;
}

export interface LanguageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LanguageWhereInput>;
  AND?: Maybe<
    LanguageSubscriptionWhereInput[] | LanguageSubscriptionWhereInput
  >;
  OR?: Maybe<LanguageSubscriptionWhereInput[] | LanguageSubscriptionWhereInput>;
  NOT?: Maybe<
    LanguageSubscriptionWhereInput[] | LanguageSubscriptionWhereInput
  >;
}

export interface SaveBlockSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SaveBlockWhereInput>;
  AND?: Maybe<
    SaveBlockSubscriptionWhereInput[] | SaveBlockSubscriptionWhereInput
  >;
  OR?: Maybe<
    SaveBlockSubscriptionWhereInput[] | SaveBlockSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SaveBlockSubscriptionWhereInput[] | SaveBlockSubscriptionWhereInput
  >;
}

export interface SkillBlockSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SkillBlockWhereInput>;
  AND?: Maybe<
    SkillBlockSubscriptionWhereInput[] | SkillBlockSubscriptionWhereInput
  >;
  OR?: Maybe<
    SkillBlockSubscriptionWhereInput[] | SkillBlockSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SkillBlockSubscriptionWhereInput[] | SkillBlockSubscriptionWhereInput
  >;
}

export interface StatBlockSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StatBlockWhereInput>;
  AND?: Maybe<
    StatBlockSubscriptionWhereInput[] | StatBlockSubscriptionWhereInput
  >;
  OR?: Maybe<
    StatBlockSubscriptionWhereInput[] | StatBlockSubscriptionWhereInput
  >;
  NOT?: Maybe<
    StatBlockSubscriptionWhereInput[] | StatBlockSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Character {
  id: ID_Output;
  name: String;
  acCalc: String;
  maxHp: Int;
  profBonus: Int;
}

export interface CharacterPromise extends Promise<Character>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  class: <T = ClassPromise>() => T;
  folk: <T = FolkPromise>() => T;
  statblock: <T = StatBlockPromise>() => T;
  skills: <T = SkillBlockPromise>() => T;
  saves: <T = SaveBlockPromise>() => T;
  acCalc: () => Promise<String>;
  hitDie: <T = DiePromise>() => T;
  maxHp: () => Promise<Int>;
  profBonus: () => Promise<Int>;
}

export interface CharacterSubscription
  extends Promise<AsyncIterator<Character>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  class: <T = ClassSubscription>() => T;
  folk: <T = FolkSubscription>() => T;
  statblock: <T = StatBlockSubscription>() => T;
  skills: <T = SkillBlockSubscription>() => T;
  saves: <T = SaveBlockSubscription>() => T;
  acCalc: () => Promise<AsyncIterator<String>>;
  hitDie: <T = DieSubscription>() => T;
  maxHp: () => Promise<AsyncIterator<Int>>;
  profBonus: () => Promise<AsyncIterator<Int>>;
}

export interface CharacterNullablePromise
  extends Promise<Character | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  class: <T = ClassPromise>() => T;
  folk: <T = FolkPromise>() => T;
  statblock: <T = StatBlockPromise>() => T;
  skills: <T = SkillBlockPromise>() => T;
  saves: <T = SaveBlockPromise>() => T;
  acCalc: () => Promise<String>;
  hitDie: <T = DiePromise>() => T;
  maxHp: () => Promise<Int>;
  profBonus: () => Promise<Int>;
}

export interface Class {
  id: ID_Output;
  name: String;
  level: Int;
}

export interface ClassPromise extends Promise<Class>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  level: () => Promise<Int>;
}

export interface ClassSubscription
  extends Promise<AsyncIterator<Class>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
}

export interface ClassNullablePromise
  extends Promise<Class | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  level: () => Promise<Int>;
}

export interface Folk {
  id: ID_Output;
  name: String;
  strMod?: Int;
  conMod?: Int;
  dexMod?: Int;
  chaMod?: Int;
  intMod?: Int;
  wisMod?: Int;
  speed: Int;
}

export interface FolkPromise extends Promise<Folk>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  strMod: () => Promise<Int>;
  conMod: () => Promise<Int>;
  dexMod: () => Promise<Int>;
  chaMod: () => Promise<Int>;
  intMod: () => Promise<Int>;
  wisMod: () => Promise<Int>;
  speed: () => Promise<Int>;
  languages: <T = FragmentableArray<Language>>(args?: {
    where?: LanguageWhereInput;
    orderBy?: LanguageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  features: <T = FragmentableArray<Feature>>(args?: {
    where?: FeatureWhereInput;
    orderBy?: FeatureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FolkSubscription
  extends Promise<AsyncIterator<Folk>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  strMod: () => Promise<AsyncIterator<Int>>;
  conMod: () => Promise<AsyncIterator<Int>>;
  dexMod: () => Promise<AsyncIterator<Int>>;
  chaMod: () => Promise<AsyncIterator<Int>>;
  intMod: () => Promise<AsyncIterator<Int>>;
  wisMod: () => Promise<AsyncIterator<Int>>;
  speed: () => Promise<AsyncIterator<Int>>;
  languages: <T = Promise<AsyncIterator<LanguageSubscription>>>(args?: {
    where?: LanguageWhereInput;
    orderBy?: LanguageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  features: <T = Promise<AsyncIterator<FeatureSubscription>>>(args?: {
    where?: FeatureWhereInput;
    orderBy?: FeatureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FolkNullablePromise
  extends Promise<Folk | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  strMod: () => Promise<Int>;
  conMod: () => Promise<Int>;
  dexMod: () => Promise<Int>;
  chaMod: () => Promise<Int>;
  intMod: () => Promise<Int>;
  wisMod: () => Promise<Int>;
  speed: () => Promise<Int>;
  languages: <T = FragmentableArray<Language>>(args?: {
    where?: LanguageWhereInput;
    orderBy?: LanguageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  features: <T = FragmentableArray<Feature>>(args?: {
    where?: FeatureWhereInput;
    orderBy?: FeatureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Language {
  id: ID_Output;
  name: String;
}

export interface LanguagePromise extends Promise<Language>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface LanguageSubscription
  extends Promise<AsyncIterator<Language>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface LanguageNullablePromise
  extends Promise<Language | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface Feature {
  id: ID_Output;
  name: String;
  description: String;
  effects: String[];
}

export interface FeaturePromise extends Promise<Feature>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  effects: () => Promise<String[]>;
  fromFolk: <T = FolkPromise>() => T;
  fromClass: <T = ClassPromise>() => T;
}

export interface FeatureSubscription
  extends Promise<AsyncIterator<Feature>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  effects: () => Promise<AsyncIterator<String[]>>;
  fromFolk: <T = FolkSubscription>() => T;
  fromClass: <T = ClassSubscription>() => T;
}

export interface FeatureNullablePromise
  extends Promise<Feature | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  effects: () => Promise<String[]>;
  fromFolk: <T = FolkPromise>() => T;
  fromClass: <T = ClassPromise>() => T;
}

export interface StatBlock {
  id: ID_Output;
  str: Int;
  con: Int;
  dex: Int;
  cha: Int;
  int: Int;
  wis: Int;
  strMod: Int;
  conMod: Int;
  dexMod: Int;
  chaMod: Int;
  intMod: Int;
  wisMod: Int;
}

export interface StatBlockPromise extends Promise<StatBlock>, Fragmentable {
  id: () => Promise<ID_Output>;
  str: () => Promise<Int>;
  con: () => Promise<Int>;
  dex: () => Promise<Int>;
  cha: () => Promise<Int>;
  int: () => Promise<Int>;
  wis: () => Promise<Int>;
  strMod: () => Promise<Int>;
  conMod: () => Promise<Int>;
  dexMod: () => Promise<Int>;
  chaMod: () => Promise<Int>;
  intMod: () => Promise<Int>;
  wisMod: () => Promise<Int>;
}

export interface StatBlockSubscription
  extends Promise<AsyncIterator<StatBlock>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  str: () => Promise<AsyncIterator<Int>>;
  con: () => Promise<AsyncIterator<Int>>;
  dex: () => Promise<AsyncIterator<Int>>;
  cha: () => Promise<AsyncIterator<Int>>;
  int: () => Promise<AsyncIterator<Int>>;
  wis: () => Promise<AsyncIterator<Int>>;
  strMod: () => Promise<AsyncIterator<Int>>;
  conMod: () => Promise<AsyncIterator<Int>>;
  dexMod: () => Promise<AsyncIterator<Int>>;
  chaMod: () => Promise<AsyncIterator<Int>>;
  intMod: () => Promise<AsyncIterator<Int>>;
  wisMod: () => Promise<AsyncIterator<Int>>;
}

export interface StatBlockNullablePromise
  extends Promise<StatBlock | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  str: () => Promise<Int>;
  con: () => Promise<Int>;
  dex: () => Promise<Int>;
  cha: () => Promise<Int>;
  int: () => Promise<Int>;
  wis: () => Promise<Int>;
  strMod: () => Promise<Int>;
  conMod: () => Promise<Int>;
  dexMod: () => Promise<Int>;
  chaMod: () => Promise<Int>;
  intMod: () => Promise<Int>;
  wisMod: () => Promise<Int>;
}

export interface SkillBlock {
  id: ID_Output;
}

export interface SkillBlockPromise extends Promise<SkillBlock>, Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SkillBlockSubscription
  extends Promise<AsyncIterator<SkillBlock>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SkillBlockNullablePromise
  extends Promise<SkillBlock | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SaveBlock {
  id: ID_Output;
}

export interface SaveBlockPromise extends Promise<SaveBlock>, Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SaveBlockSubscription
  extends Promise<AsyncIterator<SaveBlock>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SaveBlockNullablePromise
  extends Promise<SaveBlock | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface Die {
  id: ID_Output;
  faces: Int;
}

export interface DiePromise extends Promise<Die>, Fragmentable {
  id: () => Promise<ID_Output>;
  faces: () => Promise<Int>;
}

export interface DieSubscription
  extends Promise<AsyncIterator<Die>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  faces: () => Promise<AsyncIterator<Int>>;
}

export interface DieNullablePromise extends Promise<Die | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  faces: () => Promise<Int>;
}

export interface CharacterConnection {
  pageInfo: PageInfo;
  edges: CharacterEdge[];
}

export interface CharacterConnectionPromise
  extends Promise<CharacterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CharacterEdge>>() => T;
  aggregate: <T = AggregateCharacterPromise>() => T;
}

export interface CharacterConnectionSubscription
  extends Promise<AsyncIterator<CharacterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CharacterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCharacterSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CharacterEdge {
  node: Character;
  cursor: String;
}

export interface CharacterEdgePromise
  extends Promise<CharacterEdge>,
    Fragmentable {
  node: <T = CharacterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CharacterEdgeSubscription
  extends Promise<AsyncIterator<CharacterEdge>>,
    Fragmentable {
  node: <T = CharacterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCharacter {
  count: Int;
}

export interface AggregateCharacterPromise
  extends Promise<AggregateCharacter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCharacterSubscription
  extends Promise<AsyncIterator<AggregateCharacter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ClassConnection {
  pageInfo: PageInfo;
  edges: ClassEdge[];
}

export interface ClassConnectionPromise
  extends Promise<ClassConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClassEdge>>() => T;
  aggregate: <T = AggregateClassPromise>() => T;
}

export interface ClassConnectionSubscription
  extends Promise<AsyncIterator<ClassConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClassEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClassSubscription>() => T;
}

export interface ClassEdge {
  node: Class;
  cursor: String;
}

export interface ClassEdgePromise extends Promise<ClassEdge>, Fragmentable {
  node: <T = ClassPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClassEdgeSubscription
  extends Promise<AsyncIterator<ClassEdge>>,
    Fragmentable {
  node: <T = ClassSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateClass {
  count: Int;
}

export interface AggregateClassPromise
  extends Promise<AggregateClass>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClassSubscription
  extends Promise<AsyncIterator<AggregateClass>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DieConnection {
  pageInfo: PageInfo;
  edges: DieEdge[];
}

export interface DieConnectionPromise
  extends Promise<DieConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DieEdge>>() => T;
  aggregate: <T = AggregateDiePromise>() => T;
}

export interface DieConnectionSubscription
  extends Promise<AsyncIterator<DieConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDieSubscription>() => T;
}

export interface DieEdge {
  node: Die;
  cursor: String;
}

export interface DieEdgePromise extends Promise<DieEdge>, Fragmentable {
  node: <T = DiePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DieEdgeSubscription
  extends Promise<AsyncIterator<DieEdge>>,
    Fragmentable {
  node: <T = DieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDie {
  count: Int;
}

export interface AggregateDiePromise
  extends Promise<AggregateDie>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDieSubscription
  extends Promise<AsyncIterator<AggregateDie>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FeatureConnection {
  pageInfo: PageInfo;
  edges: FeatureEdge[];
}

export interface FeatureConnectionPromise
  extends Promise<FeatureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FeatureEdge>>() => T;
  aggregate: <T = AggregateFeaturePromise>() => T;
}

export interface FeatureConnectionSubscription
  extends Promise<AsyncIterator<FeatureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FeatureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFeatureSubscription>() => T;
}

export interface FeatureEdge {
  node: Feature;
  cursor: String;
}

export interface FeatureEdgePromise extends Promise<FeatureEdge>, Fragmentable {
  node: <T = FeaturePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FeatureEdgeSubscription
  extends Promise<AsyncIterator<FeatureEdge>>,
    Fragmentable {
  node: <T = FeatureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFeature {
  count: Int;
}

export interface AggregateFeaturePromise
  extends Promise<AggregateFeature>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFeatureSubscription
  extends Promise<AsyncIterator<AggregateFeature>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FolkConnection {
  pageInfo: PageInfo;
  edges: FolkEdge[];
}

export interface FolkConnectionPromise
  extends Promise<FolkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FolkEdge>>() => T;
  aggregate: <T = AggregateFolkPromise>() => T;
}

export interface FolkConnectionSubscription
  extends Promise<AsyncIterator<FolkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FolkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFolkSubscription>() => T;
}

export interface FolkEdge {
  node: Folk;
  cursor: String;
}

export interface FolkEdgePromise extends Promise<FolkEdge>, Fragmentable {
  node: <T = FolkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FolkEdgeSubscription
  extends Promise<AsyncIterator<FolkEdge>>,
    Fragmentable {
  node: <T = FolkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFolk {
  count: Int;
}

export interface AggregateFolkPromise
  extends Promise<AggregateFolk>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFolkSubscription
  extends Promise<AsyncIterator<AggregateFolk>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LanguageConnection {
  pageInfo: PageInfo;
  edges: LanguageEdge[];
}

export interface LanguageConnectionPromise
  extends Promise<LanguageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LanguageEdge>>() => T;
  aggregate: <T = AggregateLanguagePromise>() => T;
}

export interface LanguageConnectionSubscription
  extends Promise<AsyncIterator<LanguageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LanguageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLanguageSubscription>() => T;
}

export interface LanguageEdge {
  node: Language;
  cursor: String;
}

export interface LanguageEdgePromise
  extends Promise<LanguageEdge>,
    Fragmentable {
  node: <T = LanguagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LanguageEdgeSubscription
  extends Promise<AsyncIterator<LanguageEdge>>,
    Fragmentable {
  node: <T = LanguageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLanguage {
  count: Int;
}

export interface AggregateLanguagePromise
  extends Promise<AggregateLanguage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLanguageSubscription
  extends Promise<AsyncIterator<AggregateLanguage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SaveBlockConnection {
  pageInfo: PageInfo;
  edges: SaveBlockEdge[];
}

export interface SaveBlockConnectionPromise
  extends Promise<SaveBlockConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SaveBlockEdge>>() => T;
  aggregate: <T = AggregateSaveBlockPromise>() => T;
}

export interface SaveBlockConnectionSubscription
  extends Promise<AsyncIterator<SaveBlockConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SaveBlockEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSaveBlockSubscription>() => T;
}

export interface SaveBlockEdge {
  node: SaveBlock;
  cursor: String;
}

export interface SaveBlockEdgePromise
  extends Promise<SaveBlockEdge>,
    Fragmentable {
  node: <T = SaveBlockPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SaveBlockEdgeSubscription
  extends Promise<AsyncIterator<SaveBlockEdge>>,
    Fragmentable {
  node: <T = SaveBlockSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSaveBlock {
  count: Int;
}

export interface AggregateSaveBlockPromise
  extends Promise<AggregateSaveBlock>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSaveBlockSubscription
  extends Promise<AsyncIterator<AggregateSaveBlock>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SkillBlockConnection {
  pageInfo: PageInfo;
  edges: SkillBlockEdge[];
}

export interface SkillBlockConnectionPromise
  extends Promise<SkillBlockConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SkillBlockEdge>>() => T;
  aggregate: <T = AggregateSkillBlockPromise>() => T;
}

export interface SkillBlockConnectionSubscription
  extends Promise<AsyncIterator<SkillBlockConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SkillBlockEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSkillBlockSubscription>() => T;
}

export interface SkillBlockEdge {
  node: SkillBlock;
  cursor: String;
}

export interface SkillBlockEdgePromise
  extends Promise<SkillBlockEdge>,
    Fragmentable {
  node: <T = SkillBlockPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SkillBlockEdgeSubscription
  extends Promise<AsyncIterator<SkillBlockEdge>>,
    Fragmentable {
  node: <T = SkillBlockSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSkillBlock {
  count: Int;
}

export interface AggregateSkillBlockPromise
  extends Promise<AggregateSkillBlock>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSkillBlockSubscription
  extends Promise<AsyncIterator<AggregateSkillBlock>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StatBlockConnection {
  pageInfo: PageInfo;
  edges: StatBlockEdge[];
}

export interface StatBlockConnectionPromise
  extends Promise<StatBlockConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StatBlockEdge>>() => T;
  aggregate: <T = AggregateStatBlockPromise>() => T;
}

export interface StatBlockConnectionSubscription
  extends Promise<AsyncIterator<StatBlockConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StatBlockEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStatBlockSubscription>() => T;
}

export interface StatBlockEdge {
  node: StatBlock;
  cursor: String;
}

export interface StatBlockEdgePromise
  extends Promise<StatBlockEdge>,
    Fragmentable {
  node: <T = StatBlockPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StatBlockEdgeSubscription
  extends Promise<AsyncIterator<StatBlockEdge>>,
    Fragmentable {
  node: <T = StatBlockSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStatBlock {
  count: Int;
}

export interface AggregateStatBlockPromise
  extends Promise<AggregateStatBlock>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStatBlockSubscription
  extends Promise<AsyncIterator<AggregateStatBlock>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CharacterSubscriptionPayload {
  mutation: MutationType;
  node: Character;
  updatedFields: String[];
  previousValues: CharacterPreviousValues;
}

export interface CharacterSubscriptionPayloadPromise
  extends Promise<CharacterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CharacterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CharacterPreviousValuesPromise>() => T;
}

export interface CharacterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CharacterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CharacterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CharacterPreviousValuesSubscription>() => T;
}

export interface CharacterPreviousValues {
  id: ID_Output;
  name: String;
  acCalc: String;
  maxHp: Int;
  profBonus: Int;
}

export interface CharacterPreviousValuesPromise
  extends Promise<CharacterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  acCalc: () => Promise<String>;
  maxHp: () => Promise<Int>;
  profBonus: () => Promise<Int>;
}

export interface CharacterPreviousValuesSubscription
  extends Promise<AsyncIterator<CharacterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  acCalc: () => Promise<AsyncIterator<String>>;
  maxHp: () => Promise<AsyncIterator<Int>>;
  profBonus: () => Promise<AsyncIterator<Int>>;
}

export interface ClassSubscriptionPayload {
  mutation: MutationType;
  node: Class;
  updatedFields: String[];
  previousValues: ClassPreviousValues;
}

export interface ClassSubscriptionPayloadPromise
  extends Promise<ClassSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClassPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClassPreviousValuesPromise>() => T;
}

export interface ClassSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClassSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClassSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClassPreviousValuesSubscription>() => T;
}

export interface ClassPreviousValues {
  id: ID_Output;
  name: String;
  level: Int;
}

export interface ClassPreviousValuesPromise
  extends Promise<ClassPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  level: () => Promise<Int>;
}

export interface ClassPreviousValuesSubscription
  extends Promise<AsyncIterator<ClassPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  level: () => Promise<AsyncIterator<Int>>;
}

export interface DieSubscriptionPayload {
  mutation: MutationType;
  node: Die;
  updatedFields: String[];
  previousValues: DiePreviousValues;
}

export interface DieSubscriptionPayloadPromise
  extends Promise<DieSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiePreviousValuesPromise>() => T;
}

export interface DieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DieSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiePreviousValuesSubscription>() => T;
}

export interface DiePreviousValues {
  id: ID_Output;
  faces: Int;
}

export interface DiePreviousValuesPromise
  extends Promise<DiePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  faces: () => Promise<Int>;
}

export interface DiePreviousValuesSubscription
  extends Promise<AsyncIterator<DiePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  faces: () => Promise<AsyncIterator<Int>>;
}

export interface FeatureSubscriptionPayload {
  mutation: MutationType;
  node: Feature;
  updatedFields: String[];
  previousValues: FeaturePreviousValues;
}

export interface FeatureSubscriptionPayloadPromise
  extends Promise<FeatureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FeaturePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FeaturePreviousValuesPromise>() => T;
}

export interface FeatureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FeatureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FeatureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FeaturePreviousValuesSubscription>() => T;
}

export interface FeaturePreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  effects: String[];
}

export interface FeaturePreviousValuesPromise
  extends Promise<FeaturePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  effects: () => Promise<String[]>;
}

export interface FeaturePreviousValuesSubscription
  extends Promise<AsyncIterator<FeaturePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  effects: () => Promise<AsyncIterator<String[]>>;
}

export interface FolkSubscriptionPayload {
  mutation: MutationType;
  node: Folk;
  updatedFields: String[];
  previousValues: FolkPreviousValues;
}

export interface FolkSubscriptionPayloadPromise
  extends Promise<FolkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FolkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FolkPreviousValuesPromise>() => T;
}

export interface FolkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FolkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FolkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FolkPreviousValuesSubscription>() => T;
}

export interface FolkPreviousValues {
  id: ID_Output;
  name: String;
  strMod?: Int;
  conMod?: Int;
  dexMod?: Int;
  chaMod?: Int;
  intMod?: Int;
  wisMod?: Int;
  speed: Int;
}

export interface FolkPreviousValuesPromise
  extends Promise<FolkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  strMod: () => Promise<Int>;
  conMod: () => Promise<Int>;
  dexMod: () => Promise<Int>;
  chaMod: () => Promise<Int>;
  intMod: () => Promise<Int>;
  wisMod: () => Promise<Int>;
  speed: () => Promise<Int>;
}

export interface FolkPreviousValuesSubscription
  extends Promise<AsyncIterator<FolkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  strMod: () => Promise<AsyncIterator<Int>>;
  conMod: () => Promise<AsyncIterator<Int>>;
  dexMod: () => Promise<AsyncIterator<Int>>;
  chaMod: () => Promise<AsyncIterator<Int>>;
  intMod: () => Promise<AsyncIterator<Int>>;
  wisMod: () => Promise<AsyncIterator<Int>>;
  speed: () => Promise<AsyncIterator<Int>>;
}

export interface LanguageSubscriptionPayload {
  mutation: MutationType;
  node: Language;
  updatedFields: String[];
  previousValues: LanguagePreviousValues;
}

export interface LanguageSubscriptionPayloadPromise
  extends Promise<LanguageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LanguagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LanguagePreviousValuesPromise>() => T;
}

export interface LanguageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LanguageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LanguageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LanguagePreviousValuesSubscription>() => T;
}

export interface LanguagePreviousValues {
  id: ID_Output;
  name: String;
}

export interface LanguagePreviousValuesPromise
  extends Promise<LanguagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface LanguagePreviousValuesSubscription
  extends Promise<AsyncIterator<LanguagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SaveBlockSubscriptionPayload {
  mutation: MutationType;
  node: SaveBlock;
  updatedFields: String[];
  previousValues: SaveBlockPreviousValues;
}

export interface SaveBlockSubscriptionPayloadPromise
  extends Promise<SaveBlockSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SaveBlockPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SaveBlockPreviousValuesPromise>() => T;
}

export interface SaveBlockSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SaveBlockSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SaveBlockSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SaveBlockPreviousValuesSubscription>() => T;
}

export interface SaveBlockPreviousValues {
  id: ID_Output;
}

export interface SaveBlockPreviousValuesPromise
  extends Promise<SaveBlockPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SaveBlockPreviousValuesSubscription
  extends Promise<AsyncIterator<SaveBlockPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SkillBlockSubscriptionPayload {
  mutation: MutationType;
  node: SkillBlock;
  updatedFields: String[];
  previousValues: SkillBlockPreviousValues;
}

export interface SkillBlockSubscriptionPayloadPromise
  extends Promise<SkillBlockSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SkillBlockPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SkillBlockPreviousValuesPromise>() => T;
}

export interface SkillBlockSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SkillBlockSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SkillBlockSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SkillBlockPreviousValuesSubscription>() => T;
}

export interface SkillBlockPreviousValues {
  id: ID_Output;
}

export interface SkillBlockPreviousValuesPromise
  extends Promise<SkillBlockPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SkillBlockPreviousValuesSubscription
  extends Promise<AsyncIterator<SkillBlockPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface StatBlockSubscriptionPayload {
  mutation: MutationType;
  node: StatBlock;
  updatedFields: String[];
  previousValues: StatBlockPreviousValues;
}

export interface StatBlockSubscriptionPayloadPromise
  extends Promise<StatBlockSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatBlockPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatBlockPreviousValuesPromise>() => T;
}

export interface StatBlockSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StatBlockSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StatBlockSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatBlockPreviousValuesSubscription>() => T;
}

export interface StatBlockPreviousValues {
  id: ID_Output;
  str: Int;
  con: Int;
  dex: Int;
  cha: Int;
  int: Int;
  wis: Int;
  strMod: Int;
  conMod: Int;
  dexMod: Int;
  chaMod: Int;
  intMod: Int;
  wisMod: Int;
}

export interface StatBlockPreviousValuesPromise
  extends Promise<StatBlockPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  str: () => Promise<Int>;
  con: () => Promise<Int>;
  dex: () => Promise<Int>;
  cha: () => Promise<Int>;
  int: () => Promise<Int>;
  wis: () => Promise<Int>;
  strMod: () => Promise<Int>;
  conMod: () => Promise<Int>;
  dexMod: () => Promise<Int>;
  chaMod: () => Promise<Int>;
  intMod: () => Promise<Int>;
  wisMod: () => Promise<Int>;
}

export interface StatBlockPreviousValuesSubscription
  extends Promise<AsyncIterator<StatBlockPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  str: () => Promise<AsyncIterator<Int>>;
  con: () => Promise<AsyncIterator<Int>>;
  dex: () => Promise<AsyncIterator<Int>>;
  cha: () => Promise<AsyncIterator<Int>>;
  int: () => Promise<AsyncIterator<Int>>;
  wis: () => Promise<AsyncIterator<Int>>;
  strMod: () => Promise<AsyncIterator<Int>>;
  conMod: () => Promise<AsyncIterator<Int>>;
  dexMod: () => Promise<AsyncIterator<Int>>;
  chaMod: () => Promise<AsyncIterator<Int>>;
  intMod: () => Promise<AsyncIterator<Int>>;
  wisMod: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Language",
    embedded: false
  },
  {
    name: "Feature",
    embedded: false
  },
  {
    name: "Folk",
    embedded: false
  },
  {
    name: "StatBlock",
    embedded: false
  },
  {
    name: "SkillBlock",
    embedded: false
  },
  {
    name: "SaveBlock",
    embedded: false
  },
  {
    name: "Die",
    embedded: false
  },
  {
    name: "Class",
    embedded: false
  },
  {
    name: "Character",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
