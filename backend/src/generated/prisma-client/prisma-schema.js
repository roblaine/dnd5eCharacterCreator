module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCharacter {
  count: Int!
}

type AggregateClass {
  count: Int!
}

type AggregateDie {
  count: Int!
}

type AggregateFeature {
  count: Int!
}

type AggregateFolk {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateSaveBlock {
  count: Int!
}

type AggregateSkill {
  count: Int!
}

type AggregateSkillBlock {
  count: Int!
}

type AggregateStat {
  count: Int!
}

type AggregateStatBlock {
  count: Int!
}

type AggregateTemplateClass {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Character {
  id: ID!
  name: String
  class(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  folk: Folk
  stats: StatBlock
  skills: SkillBlock
  saves: SaveBlock
  acCalc: String
  hitDie: Die
  maxHp: Int
  profBonus: Int
  belongsTo: User!
}

type CharacterConnection {
  pageInfo: PageInfo!
  edges: [CharacterEdge]!
  aggregate: AggregateCharacter!
}

input CharacterCreateInput {
  id: ID
  name: String
  class: ClassCreateManyInput
  folk: FolkCreateOneInput
  stats: StatBlockCreateOneInput
  skills: SkillBlockCreateOneInput
  saves: SaveBlockCreateOneInput
  acCalc: String
  hitDie: DieCreateOneInput
  maxHp: Int
  profBonus: Int
  belongsTo: UserCreateOneWithoutCharactersInput!
}

input CharacterCreateManyWithoutBelongsToInput {
  create: [CharacterCreateWithoutBelongsToInput!]
  connect: [CharacterWhereUniqueInput!]
}

input CharacterCreateWithoutBelongsToInput {
  id: ID
  name: String
  class: ClassCreateManyInput
  folk: FolkCreateOneInput
  stats: StatBlockCreateOneInput
  skills: SkillBlockCreateOneInput
  saves: SaveBlockCreateOneInput
  acCalc: String
  hitDie: DieCreateOneInput
  maxHp: Int
  profBonus: Int
}

type CharacterEdge {
  node: Character!
  cursor: String!
}

enum CharacterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  acCalc_ASC
  acCalc_DESC
  maxHp_ASC
  maxHp_DESC
  profBonus_ASC
  profBonus_DESC
}

type CharacterPreviousValues {
  id: ID!
  name: String
  acCalc: String
  maxHp: Int
  profBonus: Int
}

input CharacterScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  acCalc: String
  acCalc_not: String
  acCalc_in: [String!]
  acCalc_not_in: [String!]
  acCalc_lt: String
  acCalc_lte: String
  acCalc_gt: String
  acCalc_gte: String
  acCalc_contains: String
  acCalc_not_contains: String
  acCalc_starts_with: String
  acCalc_not_starts_with: String
  acCalc_ends_with: String
  acCalc_not_ends_with: String
  maxHp: Int
  maxHp_not: Int
  maxHp_in: [Int!]
  maxHp_not_in: [Int!]
  maxHp_lt: Int
  maxHp_lte: Int
  maxHp_gt: Int
  maxHp_gte: Int
  profBonus: Int
  profBonus_not: Int
  profBonus_in: [Int!]
  profBonus_not_in: [Int!]
  profBonus_lt: Int
  profBonus_lte: Int
  profBonus_gt: Int
  profBonus_gte: Int
  AND: [CharacterScalarWhereInput!]
  OR: [CharacterScalarWhereInput!]
  NOT: [CharacterScalarWhereInput!]
}

type CharacterSubscriptionPayload {
  mutation: MutationType!
  node: Character
  updatedFields: [String!]
  previousValues: CharacterPreviousValues
}

input CharacterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharacterWhereInput
  AND: [CharacterSubscriptionWhereInput!]
  OR: [CharacterSubscriptionWhereInput!]
  NOT: [CharacterSubscriptionWhereInput!]
}

input CharacterUpdateInput {
  name: String
  class: ClassUpdateManyInput
  folk: FolkUpdateOneInput
  stats: StatBlockUpdateOneInput
  skills: SkillBlockUpdateOneInput
  saves: SaveBlockUpdateOneInput
  acCalc: String
  hitDie: DieUpdateOneInput
  maxHp: Int
  profBonus: Int
  belongsTo: UserUpdateOneRequiredWithoutCharactersInput
}

input CharacterUpdateManyDataInput {
  name: String
  acCalc: String
  maxHp: Int
  profBonus: Int
}

input CharacterUpdateManyMutationInput {
  name: String
  acCalc: String
  maxHp: Int
  profBonus: Int
}

input CharacterUpdateManyWithoutBelongsToInput {
  create: [CharacterCreateWithoutBelongsToInput!]
  delete: [CharacterWhereUniqueInput!]
  connect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  disconnect: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutBelongsToInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutBelongsToInput!]
  deleteMany: [CharacterScalarWhereInput!]
  updateMany: [CharacterUpdateManyWithWhereNestedInput!]
}

input CharacterUpdateManyWithWhereNestedInput {
  where: CharacterScalarWhereInput!
  data: CharacterUpdateManyDataInput!
}

input CharacterUpdateWithoutBelongsToDataInput {
  name: String
  class: ClassUpdateManyInput
  folk: FolkUpdateOneInput
  stats: StatBlockUpdateOneInput
  skills: SkillBlockUpdateOneInput
  saves: SaveBlockUpdateOneInput
  acCalc: String
  hitDie: DieUpdateOneInput
  maxHp: Int
  profBonus: Int
}

input CharacterUpdateWithWhereUniqueWithoutBelongsToInput {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateWithoutBelongsToDataInput!
}

input CharacterUpsertWithWhereUniqueWithoutBelongsToInput {
  where: CharacterWhereUniqueInput!
  update: CharacterUpdateWithoutBelongsToDataInput!
  create: CharacterCreateWithoutBelongsToInput!
}

input CharacterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  class_every: ClassWhereInput
  class_some: ClassWhereInput
  class_none: ClassWhereInput
  folk: FolkWhereInput
  stats: StatBlockWhereInput
  skills: SkillBlockWhereInput
  saves: SaveBlockWhereInput
  acCalc: String
  acCalc_not: String
  acCalc_in: [String!]
  acCalc_not_in: [String!]
  acCalc_lt: String
  acCalc_lte: String
  acCalc_gt: String
  acCalc_gte: String
  acCalc_contains: String
  acCalc_not_contains: String
  acCalc_starts_with: String
  acCalc_not_starts_with: String
  acCalc_ends_with: String
  acCalc_not_ends_with: String
  hitDie: DieWhereInput
  maxHp: Int
  maxHp_not: Int
  maxHp_in: [Int!]
  maxHp_not_in: [Int!]
  maxHp_lt: Int
  maxHp_lte: Int
  maxHp_gt: Int
  maxHp_gte: Int
  profBonus: Int
  profBonus_not: Int
  profBonus_in: [Int!]
  profBonus_not_in: [Int!]
  profBonus_lt: Int
  profBonus_lte: Int
  profBonus_gt: Int
  profBonus_gte: Int
  belongsTo: UserWhereInput
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
}

input CharacterWhereUniqueInput {
  id: ID
}

type Class {
  id: ID!
  name: String!
  class: TemplateClass!
  level: Int!
}

type ClassConnection {
  pageInfo: PageInfo!
  edges: [ClassEdge]!
  aggregate: AggregateClass!
}

input ClassCreateInput {
  id: ID
  name: String!
  class: TemplateClassCreateOneInput!
  level: Int
}

input ClassCreateManyInput {
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateOneInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

type ClassEdge {
  node: Class!
  cursor: String!
}

enum ClassOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  level_ASC
  level_DESC
}

type ClassPreviousValues {
  id: ID!
  name: String!
  level: Int!
}

input ClassScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  AND: [ClassScalarWhereInput!]
  OR: [ClassScalarWhereInput!]
  NOT: [ClassScalarWhereInput!]
}

type ClassSubscriptionPayload {
  mutation: MutationType!
  node: Class
  updatedFields: [String!]
  previousValues: ClassPreviousValues
}

input ClassSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClassWhereInput
  AND: [ClassSubscriptionWhereInput!]
  OR: [ClassSubscriptionWhereInput!]
  NOT: [ClassSubscriptionWhereInput!]
}

input ClassUpdateDataInput {
  name: String
  class: TemplateClassUpdateOneRequiredInput
  level: Int
}

input ClassUpdateInput {
  name: String
  class: TemplateClassUpdateOneRequiredInput
  level: Int
}

input ClassUpdateManyDataInput {
  name: String
  level: Int
}

input ClassUpdateManyInput {
  create: [ClassCreateInput!]
  update: [ClassUpdateWithWhereUniqueNestedInput!]
  upsert: [ClassUpsertWithWhereUniqueNestedInput!]
  delete: [ClassWhereUniqueInput!]
  connect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  deleteMany: [ClassScalarWhereInput!]
  updateMany: [ClassUpdateManyWithWhereNestedInput!]
}

input ClassUpdateManyMutationInput {
  name: String
  level: Int
}

input ClassUpdateManyWithWhereNestedInput {
  where: ClassScalarWhereInput!
  data: ClassUpdateManyDataInput!
}

input ClassUpdateOneInput {
  create: ClassCreateInput
  update: ClassUpdateDataInput
  upsert: ClassUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ClassWhereUniqueInput
}

input ClassUpdateWithWhereUniqueNestedInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateDataInput!
}

input ClassUpsertNestedInput {
  update: ClassUpdateDataInput!
  create: ClassCreateInput!
}

input ClassUpsertWithWhereUniqueNestedInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateDataInput!
  create: ClassCreateInput!
}

input ClassWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  class: TemplateClassWhereInput
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
}

input ClassWhereUniqueInput {
  id: ID
  name: String
}

type Die {
  id: ID!
  faces: Int!
}

type DieConnection {
  pageInfo: PageInfo!
  edges: [DieEdge]!
  aggregate: AggregateDie!
}

input DieCreateInput {
  id: ID
  faces: Int!
}

input DieCreateOneInput {
  create: DieCreateInput
  connect: DieWhereUniqueInput
}

type DieEdge {
  node: Die!
  cursor: String!
}

enum DieOrderByInput {
  id_ASC
  id_DESC
  faces_ASC
  faces_DESC
}

type DiePreviousValues {
  id: ID!
  faces: Int!
}

type DieSubscriptionPayload {
  mutation: MutationType!
  node: Die
  updatedFields: [String!]
  previousValues: DiePreviousValues
}

input DieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DieWhereInput
  AND: [DieSubscriptionWhereInput!]
  OR: [DieSubscriptionWhereInput!]
  NOT: [DieSubscriptionWhereInput!]
}

input DieUpdateDataInput {
  faces: Int
}

input DieUpdateInput {
  faces: Int
}

input DieUpdateManyMutationInput {
  faces: Int
}

input DieUpdateOneInput {
  create: DieCreateInput
  update: DieUpdateDataInput
  upsert: DieUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: DieWhereUniqueInput
}

input DieUpsertNestedInput {
  update: DieUpdateDataInput!
  create: DieCreateInput!
}

input DieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  faces: Int
  faces_not: Int
  faces_in: [Int!]
  faces_not_in: [Int!]
  faces_lt: Int
  faces_lte: Int
  faces_gt: Int
  faces_gte: Int
  AND: [DieWhereInput!]
  OR: [DieWhereInput!]
  NOT: [DieWhereInput!]
}

input DieWhereUniqueInput {
  id: ID
  faces: Int
}

type Feature {
  id: ID!
  name: String!
  description: String!
  effects: [String!]!
  fromFolk: Folk
  fromClass: Class
}

type FeatureConnection {
  pageInfo: PageInfo!
  edges: [FeatureEdge]!
  aggregate: AggregateFeature!
}

input FeatureCreateeffectsInput {
  set: [String!]
}

input FeatureCreateInput {
  id: ID
  name: String!
  description: String!
  effects: FeatureCreateeffectsInput
  fromFolk: FolkCreateOneWithoutFeaturesInput
  fromClass: ClassCreateOneInput
}

input FeatureCreateManyInput {
  create: [FeatureCreateInput!]
  connect: [FeatureWhereUniqueInput!]
}

input FeatureCreateManyWithoutFromFolkInput {
  create: [FeatureCreateWithoutFromFolkInput!]
  connect: [FeatureWhereUniqueInput!]
}

input FeatureCreateWithoutFromFolkInput {
  id: ID
  name: String!
  description: String!
  effects: FeatureCreateeffectsInput
  fromClass: ClassCreateOneInput
}

type FeatureEdge {
  node: Feature!
  cursor: String!
}

enum FeatureOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type FeaturePreviousValues {
  id: ID!
  name: String!
  description: String!
  effects: [String!]!
}

input FeatureScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [FeatureScalarWhereInput!]
  OR: [FeatureScalarWhereInput!]
  NOT: [FeatureScalarWhereInput!]
}

type FeatureSubscriptionPayload {
  mutation: MutationType!
  node: Feature
  updatedFields: [String!]
  previousValues: FeaturePreviousValues
}

input FeatureSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FeatureWhereInput
  AND: [FeatureSubscriptionWhereInput!]
  OR: [FeatureSubscriptionWhereInput!]
  NOT: [FeatureSubscriptionWhereInput!]
}

input FeatureUpdateDataInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
  fromFolk: FolkUpdateOneWithoutFeaturesInput
  fromClass: ClassUpdateOneInput
}

input FeatureUpdateeffectsInput {
  set: [String!]
}

input FeatureUpdateInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
  fromFolk: FolkUpdateOneWithoutFeaturesInput
  fromClass: ClassUpdateOneInput
}

input FeatureUpdateManyDataInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
}

input FeatureUpdateManyInput {
  create: [FeatureCreateInput!]
  update: [FeatureUpdateWithWhereUniqueNestedInput!]
  upsert: [FeatureUpsertWithWhereUniqueNestedInput!]
  delete: [FeatureWhereUniqueInput!]
  connect: [FeatureWhereUniqueInput!]
  set: [FeatureWhereUniqueInput!]
  disconnect: [FeatureWhereUniqueInput!]
  deleteMany: [FeatureScalarWhereInput!]
  updateMany: [FeatureUpdateManyWithWhereNestedInput!]
}

input FeatureUpdateManyMutationInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
}

input FeatureUpdateManyWithoutFromFolkInput {
  create: [FeatureCreateWithoutFromFolkInput!]
  delete: [FeatureWhereUniqueInput!]
  connect: [FeatureWhereUniqueInput!]
  set: [FeatureWhereUniqueInput!]
  disconnect: [FeatureWhereUniqueInput!]
  update: [FeatureUpdateWithWhereUniqueWithoutFromFolkInput!]
  upsert: [FeatureUpsertWithWhereUniqueWithoutFromFolkInput!]
  deleteMany: [FeatureScalarWhereInput!]
  updateMany: [FeatureUpdateManyWithWhereNestedInput!]
}

input FeatureUpdateManyWithWhereNestedInput {
  where: FeatureScalarWhereInput!
  data: FeatureUpdateManyDataInput!
}

input FeatureUpdateWithoutFromFolkDataInput {
  name: String
  description: String
  effects: FeatureUpdateeffectsInput
  fromClass: ClassUpdateOneInput
}

input FeatureUpdateWithWhereUniqueNestedInput {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateDataInput!
}

input FeatureUpdateWithWhereUniqueWithoutFromFolkInput {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateWithoutFromFolkDataInput!
}

input FeatureUpsertWithWhereUniqueNestedInput {
  where: FeatureWhereUniqueInput!
  update: FeatureUpdateDataInput!
  create: FeatureCreateInput!
}

input FeatureUpsertWithWhereUniqueWithoutFromFolkInput {
  where: FeatureWhereUniqueInput!
  update: FeatureUpdateWithoutFromFolkDataInput!
  create: FeatureCreateWithoutFromFolkInput!
}

input FeatureWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  fromFolk: FolkWhereInput
  fromClass: ClassWhereInput
  AND: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
}

input FeatureWhereUniqueInput {
  id: ID
  name: String
}

type Folk {
  id: ID!
  name: String!
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  speed: Int!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language!]
  features(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feature!]
}

type FolkConnection {
  pageInfo: PageInfo!
  edges: [FolkEdge]!
  aggregate: AggregateFolk!
}

input FolkCreateInput {
  id: ID
  name: String!
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  speed: Int!
  languages: LanguageCreateManyInput
  features: FeatureCreateManyWithoutFromFolkInput
}

input FolkCreateOneInput {
  create: FolkCreateInput
  connect: FolkWhereUniqueInput
}

input FolkCreateOneWithoutFeaturesInput {
  create: FolkCreateWithoutFeaturesInput
  connect: FolkWhereUniqueInput
}

input FolkCreateWithoutFeaturesInput {
  id: ID
  name: String!
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  speed: Int!
  languages: LanguageCreateManyInput
}

type FolkEdge {
  node: Folk!
  cursor: String!
}

enum FolkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  strMod_ASC
  strMod_DESC
  conMod_ASC
  conMod_DESC
  dexMod_ASC
  dexMod_DESC
  chaMod_ASC
  chaMod_DESC
  intMod_ASC
  intMod_DESC
  wisMod_ASC
  wisMod_DESC
  speed_ASC
  speed_DESC
}

type FolkPreviousValues {
  id: ID!
  name: String!
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  speed: Int!
}

type FolkSubscriptionPayload {
  mutation: MutationType!
  node: Folk
  updatedFields: [String!]
  previousValues: FolkPreviousValues
}

input FolkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FolkWhereInput
  AND: [FolkSubscriptionWhereInput!]
  OR: [FolkSubscriptionWhereInput!]
  NOT: [FolkSubscriptionWhereInput!]
}

input FolkUpdateDataInput {
  name: String
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  speed: Int
  languages: LanguageUpdateManyInput
  features: FeatureUpdateManyWithoutFromFolkInput
}

input FolkUpdateInput {
  name: String
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  speed: Int
  languages: LanguageUpdateManyInput
  features: FeatureUpdateManyWithoutFromFolkInput
}

input FolkUpdateManyMutationInput {
  name: String
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  speed: Int
}

input FolkUpdateOneInput {
  create: FolkCreateInput
  update: FolkUpdateDataInput
  upsert: FolkUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: FolkWhereUniqueInput
}

input FolkUpdateOneWithoutFeaturesInput {
  create: FolkCreateWithoutFeaturesInput
  update: FolkUpdateWithoutFeaturesDataInput
  upsert: FolkUpsertWithoutFeaturesInput
  delete: Boolean
  disconnect: Boolean
  connect: FolkWhereUniqueInput
}

input FolkUpdateWithoutFeaturesDataInput {
  name: String
  strMod: Int
  conMod: Int
  dexMod: Int
  chaMod: Int
  intMod: Int
  wisMod: Int
  speed: Int
  languages: LanguageUpdateManyInput
}

input FolkUpsertNestedInput {
  update: FolkUpdateDataInput!
  create: FolkCreateInput!
}

input FolkUpsertWithoutFeaturesInput {
  update: FolkUpdateWithoutFeaturesDataInput!
  create: FolkCreateWithoutFeaturesInput!
}

input FolkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  strMod: Int
  strMod_not: Int
  strMod_in: [Int!]
  strMod_not_in: [Int!]
  strMod_lt: Int
  strMod_lte: Int
  strMod_gt: Int
  strMod_gte: Int
  conMod: Int
  conMod_not: Int
  conMod_in: [Int!]
  conMod_not_in: [Int!]
  conMod_lt: Int
  conMod_lte: Int
  conMod_gt: Int
  conMod_gte: Int
  dexMod: Int
  dexMod_not: Int
  dexMod_in: [Int!]
  dexMod_not_in: [Int!]
  dexMod_lt: Int
  dexMod_lte: Int
  dexMod_gt: Int
  dexMod_gte: Int
  chaMod: Int
  chaMod_not: Int
  chaMod_in: [Int!]
  chaMod_not_in: [Int!]
  chaMod_lt: Int
  chaMod_lte: Int
  chaMod_gt: Int
  chaMod_gte: Int
  intMod: Int
  intMod_not: Int
  intMod_in: [Int!]
  intMod_not_in: [Int!]
  intMod_lt: Int
  intMod_lte: Int
  intMod_gt: Int
  intMod_gte: Int
  wisMod: Int
  wisMod_not: Int
  wisMod_in: [Int!]
  wisMod_not_in: [Int!]
  wisMod_lt: Int
  wisMod_lte: Int
  wisMod_gt: Int
  wisMod_gte: Int
  speed: Int
  speed_not: Int
  speed_in: [Int!]
  speed_not_in: [Int!]
  speed_lt: Int
  speed_lte: Int
  speed_gt: Int
  speed_gte: Int
  languages_every: LanguageWhereInput
  languages_some: LanguageWhereInput
  languages_none: LanguageWhereInput
  features_every: FeatureWhereInput
  features_some: FeatureWhereInput
  features_none: FeatureWhereInput
  AND: [FolkWhereInput!]
  OR: [FolkWhereInput!]
  NOT: [FolkWhereInput!]
}

input FolkWhereUniqueInput {
  id: ID
}

type Language {
  id: ID!
  name: String!
}

type LanguageConnection {
  pageInfo: PageInfo!
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  id: ID
  name: String!
}

input LanguageCreateManyInput {
  create: [LanguageCreateInput!]
  connect: [LanguageWhereUniqueInput!]
}

type LanguageEdge {
  node: Language!
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type LanguagePreviousValues {
  id: ID!
  name: String!
}

input LanguageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [LanguageScalarWhereInput!]
  OR: [LanguageScalarWhereInput!]
  NOT: [LanguageScalarWhereInput!]
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
  AND: [LanguageSubscriptionWhereInput!]
  OR: [LanguageSubscriptionWhereInput!]
  NOT: [LanguageSubscriptionWhereInput!]
}

input LanguageUpdateDataInput {
  name: String
}

input LanguageUpdateInput {
  name: String
}

input LanguageUpdateManyDataInput {
  name: String
}

input LanguageUpdateManyInput {
  create: [LanguageCreateInput!]
  update: [LanguageUpdateWithWhereUniqueNestedInput!]
  upsert: [LanguageUpsertWithWhereUniqueNestedInput!]
  delete: [LanguageWhereUniqueInput!]
  connect: [LanguageWhereUniqueInput!]
  set: [LanguageWhereUniqueInput!]
  disconnect: [LanguageWhereUniqueInput!]
  deleteMany: [LanguageScalarWhereInput!]
  updateMany: [LanguageUpdateManyWithWhereNestedInput!]
}

input LanguageUpdateManyMutationInput {
  name: String
}

input LanguageUpdateManyWithWhereNestedInput {
  where: LanguageScalarWhereInput!
  data: LanguageUpdateManyDataInput!
}

input LanguageUpdateWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  data: LanguageUpdateDataInput!
}

input LanguageUpsertWithWhereUniqueNestedInput {
  where: LanguageWhereUniqueInput!
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
}

input LanguageWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCharacter(data: CharacterCreateInput!): Character!
  updateCharacter(data: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character
  updateManyCharacters(data: CharacterUpdateManyMutationInput!, where: CharacterWhereInput): BatchPayload!
  upsertCharacter(where: CharacterWhereUniqueInput!, create: CharacterCreateInput!, update: CharacterUpdateInput!): Character!
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteManyCharacters(where: CharacterWhereInput): BatchPayload!
  createClass(data: ClassCreateInput!): Class!
  updateClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  updateManyClasses(data: ClassUpdateManyMutationInput!, where: ClassWhereInput): BatchPayload!
  upsertClass(where: ClassWhereUniqueInput!, create: ClassCreateInput!, update: ClassUpdateInput!): Class!
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteManyClasses(where: ClassWhereInput): BatchPayload!
  createDie(data: DieCreateInput!): Die!
  updateDie(data: DieUpdateInput!, where: DieWhereUniqueInput!): Die
  updateManyDies(data: DieUpdateManyMutationInput!, where: DieWhereInput): BatchPayload!
  upsertDie(where: DieWhereUniqueInput!, create: DieCreateInput!, update: DieUpdateInput!): Die!
  deleteDie(where: DieWhereUniqueInput!): Die
  deleteManyDies(where: DieWhereInput): BatchPayload!
  createFeature(data: FeatureCreateInput!): Feature!
  updateFeature(data: FeatureUpdateInput!, where: FeatureWhereUniqueInput!): Feature
  updateManyFeatures(data: FeatureUpdateManyMutationInput!, where: FeatureWhereInput): BatchPayload!
  upsertFeature(where: FeatureWhereUniqueInput!, create: FeatureCreateInput!, update: FeatureUpdateInput!): Feature!
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteManyFeatures(where: FeatureWhereInput): BatchPayload!
  createFolk(data: FolkCreateInput!): Folk!
  updateFolk(data: FolkUpdateInput!, where: FolkWhereUniqueInput!): Folk
  updateManyFolks(data: FolkUpdateManyMutationInput!, where: FolkWhereInput): BatchPayload!
  upsertFolk(where: FolkWhereUniqueInput!, create: FolkCreateInput!, update: FolkUpdateInput!): Folk!
  deleteFolk(where: FolkWhereUniqueInput!): Folk
  deleteManyFolks(where: FolkWhereInput): BatchPayload!
  createLanguage(data: LanguageCreateInput!): Language!
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  createSaveBlock(data: SaveBlockCreateInput!): SaveBlock!
  deleteSaveBlock(where: SaveBlockWhereUniqueInput!): SaveBlock
  deleteManySaveBlocks(where: SaveBlockWhereInput): BatchPayload!
  createSkill(data: SkillCreateInput!): Skill!
  updateSkill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill
  updateManySkills(data: SkillUpdateManyMutationInput!, where: SkillWhereInput): BatchPayload!
  upsertSkill(where: SkillWhereUniqueInput!, create: SkillCreateInput!, update: SkillUpdateInput!): Skill!
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteManySkills(where: SkillWhereInput): BatchPayload!
  createSkillBlock(data: SkillBlockCreateInput!): SkillBlock!
  deleteSkillBlock(where: SkillBlockWhereUniqueInput!): SkillBlock
  deleteManySkillBlocks(where: SkillBlockWhereInput): BatchPayload!
  createStat(data: StatCreateInput!): Stat!
  updateStat(data: StatUpdateInput!, where: StatWhereUniqueInput!): Stat
  updateManyStats(data: StatUpdateManyMutationInput!, where: StatWhereInput): BatchPayload!
  upsertStat(where: StatWhereUniqueInput!, create: StatCreateInput!, update: StatUpdateInput!): Stat!
  deleteStat(where: StatWhereUniqueInput!): Stat
  deleteManyStats(where: StatWhereInput): BatchPayload!
  createStatBlock(data: StatBlockCreateInput!): StatBlock!
  updateStatBlock(data: StatBlockUpdateInput!, where: StatBlockWhereUniqueInput!): StatBlock
  upsertStatBlock(where: StatBlockWhereUniqueInput!, create: StatBlockCreateInput!, update: StatBlockUpdateInput!): StatBlock!
  deleteStatBlock(where: StatBlockWhereUniqueInput!): StatBlock
  deleteManyStatBlocks(where: StatBlockWhereInput): BatchPayload!
  createTemplateClass(data: TemplateClassCreateInput!): TemplateClass!
  updateTemplateClass(data: TemplateClassUpdateInput!, where: TemplateClassWhereUniqueInput!): TemplateClass
  updateManyTemplateClasses(data: TemplateClassUpdateManyMutationInput!, where: TemplateClassWhereInput): BatchPayload!
  upsertTemplateClass(where: TemplateClassWhereUniqueInput!, create: TemplateClassCreateInput!, update: TemplateClassUpdateInput!): TemplateClass!
  deleteTemplateClass(where: TemplateClassWhereUniqueInput!): TemplateClass
  deleteManyTemplateClasses(where: TemplateClassWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  USER
  ADMIN
}

type Query {
  character(where: CharacterWhereUniqueInput!): Character
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character]!
  charactersConnection(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacterConnection!
  class(where: ClassWhereUniqueInput!): Class
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class]!
  classesConnection(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassConnection!
  die(where: DieWhereUniqueInput!): Die
  dies(where: DieWhereInput, orderBy: DieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Die]!
  diesConnection(where: DieWhereInput, orderBy: DieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DieConnection!
  feature(where: FeatureWhereUniqueInput!): Feature
  features(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feature]!
  featuresConnection(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeatureConnection!
  folk(where: FolkWhereUniqueInput!): Folk
  folks(where: FolkWhereInput, orderBy: FolkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folk]!
  folksConnection(where: FolkWhereInput, orderBy: FolkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FolkConnection!
  language(where: LanguageWhereUniqueInput!): Language
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  saveBlock(where: SaveBlockWhereUniqueInput!): SaveBlock
  saveBlocks(where: SaveBlockWhereInput, orderBy: SaveBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SaveBlock]!
  saveBlocksConnection(where: SaveBlockWhereInput, orderBy: SaveBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SaveBlockConnection!
  skill(where: SkillWhereUniqueInput!): Skill
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill]!
  skillsConnection(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SkillConnection!
  skillBlock(where: SkillBlockWhereUniqueInput!): SkillBlock
  skillBlocks(where: SkillBlockWhereInput, orderBy: SkillBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SkillBlock]!
  skillBlocksConnection(where: SkillBlockWhereInput, orderBy: SkillBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SkillBlockConnection!
  stat(where: StatWhereUniqueInput!): Stat
  stats(where: StatWhereInput, orderBy: StatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stat]!
  statsConnection(where: StatWhereInput, orderBy: StatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatConnection!
  statBlock(where: StatBlockWhereUniqueInput!): StatBlock
  statBlocks(where: StatBlockWhereInput, orderBy: StatBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StatBlock]!
  statBlocksConnection(where: StatBlockWhereInput, orderBy: StatBlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatBlockConnection!
  templateClass(where: TemplateClassWhereUniqueInput!): TemplateClass
  templateClasses(where: TemplateClassWhereInput, orderBy: TemplateClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TemplateClass]!
  templateClassesConnection(where: TemplateClassWhereInput, orderBy: TemplateClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TemplateClassConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type SaveBlock {
  id: ID!
}

type SaveBlockConnection {
  pageInfo: PageInfo!
  edges: [SaveBlockEdge]!
  aggregate: AggregateSaveBlock!
}

input SaveBlockCreateInput {
  id: ID
}

input SaveBlockCreateOneInput {
  create: SaveBlockCreateInput
  connect: SaveBlockWhereUniqueInput
}

type SaveBlockEdge {
  node: SaveBlock!
  cursor: String!
}

enum SaveBlockOrderByInput {
  id_ASC
  id_DESC
}

type SaveBlockPreviousValues {
  id: ID!
}

type SaveBlockSubscriptionPayload {
  mutation: MutationType!
  node: SaveBlock
  updatedFields: [String!]
  previousValues: SaveBlockPreviousValues
}

input SaveBlockSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SaveBlockWhereInput
  AND: [SaveBlockSubscriptionWhereInput!]
  OR: [SaveBlockSubscriptionWhereInput!]
  NOT: [SaveBlockSubscriptionWhereInput!]
}

input SaveBlockUpdateOneInput {
  create: SaveBlockCreateInput
  delete: Boolean
  disconnect: Boolean
  connect: SaveBlockWhereUniqueInput
}

input SaveBlockWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [SaveBlockWhereInput!]
  OR: [SaveBlockWhereInput!]
  NOT: [SaveBlockWhereInput!]
}

input SaveBlockWhereUniqueInput {
  id: ID
}

type Skill {
  id: ID!
  name: String!
  stat: Stat!
  proficient: Boolean
}

type SkillBlock {
  id: ID!
}

type SkillBlockConnection {
  pageInfo: PageInfo!
  edges: [SkillBlockEdge]!
  aggregate: AggregateSkillBlock!
}

input SkillBlockCreateInput {
  id: ID
}

input SkillBlockCreateOneInput {
  create: SkillBlockCreateInput
  connect: SkillBlockWhereUniqueInput
}

type SkillBlockEdge {
  node: SkillBlock!
  cursor: String!
}

enum SkillBlockOrderByInput {
  id_ASC
  id_DESC
}

type SkillBlockPreviousValues {
  id: ID!
}

type SkillBlockSubscriptionPayload {
  mutation: MutationType!
  node: SkillBlock
  updatedFields: [String!]
  previousValues: SkillBlockPreviousValues
}

input SkillBlockSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SkillBlockWhereInput
  AND: [SkillBlockSubscriptionWhereInput!]
  OR: [SkillBlockSubscriptionWhereInput!]
  NOT: [SkillBlockSubscriptionWhereInput!]
}

input SkillBlockUpdateOneInput {
  create: SkillBlockCreateInput
  delete: Boolean
  disconnect: Boolean
  connect: SkillBlockWhereUniqueInput
}

input SkillBlockWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [SkillBlockWhereInput!]
  OR: [SkillBlockWhereInput!]
  NOT: [SkillBlockWhereInput!]
}

input SkillBlockWhereUniqueInput {
  id: ID
}

type SkillConnection {
  pageInfo: PageInfo!
  edges: [SkillEdge]!
  aggregate: AggregateSkill!
}

input SkillCreateInput {
  id: ID
  name: String!
  stat: StatCreateOneInput!
  proficient: Boolean
}

type SkillEdge {
  node: Skill!
  cursor: String!
}

enum SkillOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  proficient_ASC
  proficient_DESC
}

type SkillPreviousValues {
  id: ID!
  name: String!
  proficient: Boolean
}

type SkillSubscriptionPayload {
  mutation: MutationType!
  node: Skill
  updatedFields: [String!]
  previousValues: SkillPreviousValues
}

input SkillSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SkillWhereInput
  AND: [SkillSubscriptionWhereInput!]
  OR: [SkillSubscriptionWhereInput!]
  NOT: [SkillSubscriptionWhereInput!]
}

input SkillUpdateInput {
  name: String
  stat: StatUpdateOneRequiredInput
  proficient: Boolean
}

input SkillUpdateManyMutationInput {
  name: String
  proficient: Boolean
}

input SkillWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  stat: StatWhereInput
  proficient: Boolean
  proficient_not: Boolean
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
}

input SkillWhereUniqueInput {
  id: ID
}

type Stat {
  id: ID!
  name: StatList!
  score: Int!
  mod: Int!
}

type StatBlock {
  id: ID!
  stats(where: StatWhereInput, orderBy: StatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stat!]
}

type StatBlockConnection {
  pageInfo: PageInfo!
  edges: [StatBlockEdge]!
  aggregate: AggregateStatBlock!
}

input StatBlockCreateInput {
  id: ID
  stats: StatCreateManyInput
}

input StatBlockCreateOneInput {
  create: StatBlockCreateInput
  connect: StatBlockWhereUniqueInput
}

type StatBlockEdge {
  node: StatBlock!
  cursor: String!
}

enum StatBlockOrderByInput {
  id_ASC
  id_DESC
}

type StatBlockPreviousValues {
  id: ID!
}

type StatBlockSubscriptionPayload {
  mutation: MutationType!
  node: StatBlock
  updatedFields: [String!]
  previousValues: StatBlockPreviousValues
}

input StatBlockSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StatBlockWhereInput
  AND: [StatBlockSubscriptionWhereInput!]
  OR: [StatBlockSubscriptionWhereInput!]
  NOT: [StatBlockSubscriptionWhereInput!]
}

input StatBlockUpdateDataInput {
  stats: StatUpdateManyInput
}

input StatBlockUpdateInput {
  stats: StatUpdateManyInput
}

input StatBlockUpdateOneInput {
  create: StatBlockCreateInput
  update: StatBlockUpdateDataInput
  upsert: StatBlockUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: StatBlockWhereUniqueInput
}

input StatBlockUpsertNestedInput {
  update: StatBlockUpdateDataInput!
  create: StatBlockCreateInput!
}

input StatBlockWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  stats_every: StatWhereInput
  stats_some: StatWhereInput
  stats_none: StatWhereInput
  AND: [StatBlockWhereInput!]
  OR: [StatBlockWhereInput!]
  NOT: [StatBlockWhereInput!]
}

input StatBlockWhereUniqueInput {
  id: ID
}

type StatConnection {
  pageInfo: PageInfo!
  edges: [StatEdge]!
  aggregate: AggregateStat!
}

input StatCreateInput {
  id: ID
  name: StatList!
  score: Int
  mod: Int
}

input StatCreateManyInput {
  create: [StatCreateInput!]
  connect: [StatWhereUniqueInput!]
}

input StatCreateOneInput {
  create: StatCreateInput
  connect: StatWhereUniqueInput
}

type StatEdge {
  node: Stat!
  cursor: String!
}

enum StatList {
  STR
  CON
  DEX
  CHA
  WIS
  INT
}

enum StatOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  score_ASC
  score_DESC
  mod_ASC
  mod_DESC
}

type StatPreviousValues {
  id: ID!
  name: StatList!
  score: Int!
  mod: Int!
}

input StatScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: StatList
  name_not: StatList
  name_in: [StatList!]
  name_not_in: [StatList!]
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  mod: Int
  mod_not: Int
  mod_in: [Int!]
  mod_not_in: [Int!]
  mod_lt: Int
  mod_lte: Int
  mod_gt: Int
  mod_gte: Int
  AND: [StatScalarWhereInput!]
  OR: [StatScalarWhereInput!]
  NOT: [StatScalarWhereInput!]
}

type StatSubscriptionPayload {
  mutation: MutationType!
  node: Stat
  updatedFields: [String!]
  previousValues: StatPreviousValues
}

input StatSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StatWhereInput
  AND: [StatSubscriptionWhereInput!]
  OR: [StatSubscriptionWhereInput!]
  NOT: [StatSubscriptionWhereInput!]
}

input StatUpdateDataInput {
  name: StatList
  score: Int
  mod: Int
}

input StatUpdateInput {
  name: StatList
  score: Int
  mod: Int
}

input StatUpdateManyDataInput {
  name: StatList
  score: Int
  mod: Int
}

input StatUpdateManyInput {
  create: [StatCreateInput!]
  update: [StatUpdateWithWhereUniqueNestedInput!]
  upsert: [StatUpsertWithWhereUniqueNestedInput!]
  delete: [StatWhereUniqueInput!]
  connect: [StatWhereUniqueInput!]
  set: [StatWhereUniqueInput!]
  disconnect: [StatWhereUniqueInput!]
  deleteMany: [StatScalarWhereInput!]
  updateMany: [StatUpdateManyWithWhereNestedInput!]
}

input StatUpdateManyMutationInput {
  name: StatList
  score: Int
  mod: Int
}

input StatUpdateManyWithWhereNestedInput {
  where: StatScalarWhereInput!
  data: StatUpdateManyDataInput!
}

input StatUpdateOneRequiredInput {
  create: StatCreateInput
  update: StatUpdateDataInput
  upsert: StatUpsertNestedInput
  connect: StatWhereUniqueInput
}

input StatUpdateWithWhereUniqueNestedInput {
  where: StatWhereUniqueInput!
  data: StatUpdateDataInput!
}

input StatUpsertNestedInput {
  update: StatUpdateDataInput!
  create: StatCreateInput!
}

input StatUpsertWithWhereUniqueNestedInput {
  where: StatWhereUniqueInput!
  update: StatUpdateDataInput!
  create: StatCreateInput!
}

input StatWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: StatList
  name_not: StatList
  name_in: [StatList!]
  name_not_in: [StatList!]
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  mod: Int
  mod_not: Int
  mod_in: [Int!]
  mod_not_in: [Int!]
  mod_lt: Int
  mod_lte: Int
  mod_gt: Int
  mod_gte: Int
  AND: [StatWhereInput!]
  OR: [StatWhereInput!]
  NOT: [StatWhereInput!]
}

input StatWhereUniqueInput {
  id: ID
}

type Subscription {
  character(where: CharacterSubscriptionWhereInput): CharacterSubscriptionPayload
  class(where: ClassSubscriptionWhereInput): ClassSubscriptionPayload
  die(where: DieSubscriptionWhereInput): DieSubscriptionPayload
  feature(where: FeatureSubscriptionWhereInput): FeatureSubscriptionPayload
  folk(where: FolkSubscriptionWhereInput): FolkSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  saveBlock(where: SaveBlockSubscriptionWhereInput): SaveBlockSubscriptionPayload
  skill(where: SkillSubscriptionWhereInput): SkillSubscriptionPayload
  skillBlock(where: SkillBlockSubscriptionWhereInput): SkillBlockSubscriptionPayload
  stat(where: StatSubscriptionWhereInput): StatSubscriptionPayload
  statBlock(where: StatBlockSubscriptionWhereInput): StatBlockSubscriptionPayload
  templateClass(where: TemplateClassSubscriptionWhereInput): TemplateClassSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TemplateClass {
  id: ID!
  name: String!
  features(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feature!]
}

type TemplateClassConnection {
  pageInfo: PageInfo!
  edges: [TemplateClassEdge]!
  aggregate: AggregateTemplateClass!
}

input TemplateClassCreateInput {
  id: ID
  name: String!
  features: FeatureCreateManyInput
}

input TemplateClassCreateOneInput {
  create: TemplateClassCreateInput
  connect: TemplateClassWhereUniqueInput
}

type TemplateClassEdge {
  node: TemplateClass!
  cursor: String!
}

enum TemplateClassOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TemplateClassPreviousValues {
  id: ID!
  name: String!
}

type TemplateClassSubscriptionPayload {
  mutation: MutationType!
  node: TemplateClass
  updatedFields: [String!]
  previousValues: TemplateClassPreviousValues
}

input TemplateClassSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TemplateClassWhereInput
  AND: [TemplateClassSubscriptionWhereInput!]
  OR: [TemplateClassSubscriptionWhereInput!]
  NOT: [TemplateClassSubscriptionWhereInput!]
}

input TemplateClassUpdateDataInput {
  name: String
  features: FeatureUpdateManyInput
}

input TemplateClassUpdateInput {
  name: String
  features: FeatureUpdateManyInput
}

input TemplateClassUpdateManyMutationInput {
  name: String
}

input TemplateClassUpdateOneRequiredInput {
  create: TemplateClassCreateInput
  update: TemplateClassUpdateDataInput
  upsert: TemplateClassUpsertNestedInput
  connect: TemplateClassWhereUniqueInput
}

input TemplateClassUpsertNestedInput {
  update: TemplateClassUpdateDataInput!
  create: TemplateClassCreateInput!
}

input TemplateClassWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  features_every: FeatureWhereInput
  features_some: FeatureWhereInput
  features_none: FeatureWhereInput
  AND: [TemplateClassWhereInput!]
  OR: [TemplateClassWhereInput!]
  NOT: [TemplateClassWhereInput!]
}

input TemplateClassWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
  characters: CharacterCreateManyWithoutBelongsToInput
}

input UserCreateOneWithoutCharactersInput {
  create: UserCreateWithoutCharactersInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutCharactersInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
  characters: CharacterUpdateManyWithoutBelongsToInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutCharactersInput {
  create: UserCreateWithoutCharactersInput
  update: UserUpdateWithoutCharactersDataInput
  upsert: UserUpsertWithoutCharactersInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutCharactersDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpsertWithoutCharactersInput {
  update: UserUpdateWithoutCharactersDataInput!
  create: UserCreateWithoutCharactersInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: String
  resetTokenExpiry_not: String
  resetTokenExpiry_in: [String!]
  resetTokenExpiry_not_in: [String!]
  resetTokenExpiry_lt: String
  resetTokenExpiry_lte: String
  resetTokenExpiry_gt: String
  resetTokenExpiry_gte: String
  resetTokenExpiry_contains: String
  resetTokenExpiry_not_contains: String
  resetTokenExpiry_starts_with: String
  resetTokenExpiry_not_starts_with: String
  resetTokenExpiry_ends_with: String
  resetTokenExpiry_not_ends_with: String
  characters_every: CharacterWhereInput
  characters_some: CharacterWhereInput
  characters_none: CharacterWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    